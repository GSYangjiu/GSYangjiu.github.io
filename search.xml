<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode798 得分最高的最小轮调</title>
      <link href="/posts/e1457002.html"/>
      <url>/posts/e1457002.html</url>
      
        <content type="html"><![CDATA[<h1 id="先看一下题目"><a href="#先看一下题目" class="headerlink" title="先看一下题目"></a><a href="https://leetcode-cn.com/problems/smallest-rotation-with-highest-score/">先看一下题目</a></h1><p><img src="http://img.yukio.top/blog/post/20220318/17-10-10-227271.jpg" alt="得分最高的最小轮调"></p><p>自己只想到了暴力解，两次循环，统计每次轮调的得分，取最高分，时间复杂度$O(n^2)$。</p><p>提交之后一直TLE，无奈看了题解，觉得解法非常巧妙。</p><h1 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h1><p>我们先来看一下<strong>差分数组</strong>的概念。</p><p>思考一个问题，当我们要多次批量修改一个数组，比如将数组中所有元素统一加一个数，某个区间的元素统一减某个数，我们要怎么做？</p><p>当然我们可以通过多次遍历数组，修改每次要操作的的值，直到实现要求，时间复杂度为$O(n^2)$。</p><p>有没有比遍历更巧妙地方法？这时我们就可以使用到<strong>差分数组</strong>。</p><blockquote><p>差分数组就是原始数组中元素与他前一个元素差值组成的数组，<em>d[i]&#x3D;a[i+1]-a[i]</em></p></blockquote><p>我们来看一个具体的例子，将数组中所有元素统一加1，再将下标[2,5]中的元素减2，下标[5,7]中的元素加3</p><p>原始数组，遍历一遍得到差分数组：</p><table><thead><tr><th align="left">下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td align="left">原始数组</td><td>1</td><td>2</td><td>3</td><td>6</td><td>9</td><td>8</td><td>4</td><td>7</td><td>5</td></tr><tr><td align="left">差分数组</td><td></td><td>1</td><td>1</td><td>3</td><td>3</td><td>-1</td><td>-4</td><td>3</td><td>-2</td></tr></tbody></table><p>全部元素加1，差分数组不变：</p><table><thead><tr><th align="left">下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td align="left">原始数组</td><td>2</td><td>3</td><td>4</td><td>7</td><td>10</td><td>9</td><td>5</td><td>8</td><td>6</td></tr><tr><td align="left">差分数组</td><td></td><td>1</td><td>1</td><td>3</td><td>3</td><td>-1</td><td>-4</td><td>3</td><td>-2</td></tr></tbody></table><p>下标[2,5]中元素减2：</p><table><thead><tr><th align="left">下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td align="left">原始数组</td><td>2</td><td>3</td><td>4-2&#x3D;2</td><td>7-2&#x3D;2</td><td>10-2&#x3D;8</td><td>9-2&#x3D;7</td><td>5</td><td>8</td><td>6</td></tr><tr><td align="left">差分数组</td><td></td><td>1</td><td>1-2&#x3D;-1</td><td>3</td><td>3</td><td>-1</td><td>-4+2&#x3D;-2</td><td>3</td><td>-2</td></tr></tbody></table><p>下标[5,7]中元素加3：</p><table><thead><tr><th align="left">下标</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td align="left">原始数组</td><td>2</td><td>3</td><td>2</td><td>5</td><td>8</td><td>7+3&#x3D;10</td><td>5+3&#x3D;8</td><td>8+3&#x3D;11</td><td>6</td></tr><tr><td align="left">差分数组</td><td></td><td>1</td><td>-1</td><td>3</td><td>3</td><td>-1+3&#x3D;2</td><td>-2</td><td>3</td><td>-2-3&#x3D;-5</td></tr></tbody></table><blockquote><p>我们可以发现，数组统一加一个数或减一个数，差分数组不发生变化。</p><p>[n,m]中元素加上或减去一个数，差分数组只需要变动d[n]和d[m+1]：</p><p>​    <strong>[n,m]中元素加k：d[n]-&#x3D;k，d[m+1]+&#x3D;k;</strong></p><p>​    <strong>[n,m]中元素减k：d[n]+&#x3D;k，d[m+1]-&#x3D;k;</strong></p></blockquote><p>可以看出，通过差分数组，我们将时间复杂度从$O(n^2)$缩短到了$O(n)$。</p><h1 id="回到题目"><a href="#回到题目" class="headerlink" title="回到题目"></a>回到题目</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>利用差分数组的思想，我们不用遍历数组取计算每个元素的值和其下标的大小，只需要遍历一遍数组，每个元素分情况处理，使用另一个move数组记录每次轮调得分的变动情况，也就是是否得分的临界情况，这样不需要计算实际得分，然后遍历move数组，进行累和，最大值即为最高得分。</p><blockquote><p>1.nums[i] 一开始所在位置就可以得分</p><ul><li>move[0]得分</li><li>当前元素左移，index递减，直到值大于index，不得分，move[(i - nums[i] + 1) % n]–</li><li>继续左移直到移动到数组最右边，move[(i + 1) % n]++</li></ul><p>2.nums[i] 一开始所在位置不可以得分</p><ul><li>左移不得分，直到移动到数组最右边，move[(i + 1) % n]++</li><li>当前元素左移，index递减，直到值大于index，不得分，move[(n - nums[i] + 1) % n]–</li></ul></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">bestRotation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">            <span class="type">int</span>[] move = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &lt;= i) &#123;</span><br><span class="line">                    <span class="comment">// nums[i] 一开始所在位置就可以得分</span></span><br><span class="line">                    move[<span class="number">0</span>]++; <span class="comment">// 不移动时 nums[i]就产生贡献</span></span><br><span class="line">                    <span class="comment">// 左移 i - nums[i] + 1 则差首次为正； 贡献取消； 继续左移也不会产生新贡献</span></span><br><span class="line">                    move[(i - nums[i] + <span class="number">1</span>) % n]--; </span><br><span class="line">                    move[(i + <span class="number">1</span>) % n]++; <span class="comment">// 直到移动到坐标小于0的位置； 变成移动到最右边； 贡献产生</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 一开始所在位置不可得分；左移是没有用的；只有移动到边界时，才会产生变化</span></span><br><span class="line">                    move[(i + <span class="number">1</span>) % n]++;</span><br><span class="line">                    <span class="comment">// 继续左移动；则会再次到达 值和下标相同的临界点； 继续左移一位则得分取消</span></span><br><span class="line">                    move[(n - (nums[i] - i) + <span class="number">1</span>) % n]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">maxS</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">best</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>; m &lt; n; m++) &#123;</span><br><span class="line">                score += move[m];</span><br><span class="line">                <span class="keyword">if</span> (score &gt; maxS) &#123;</span><br><span class="line">                    maxS = score;</span><br><span class="line">                    best = m;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> best;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提交通过"><a href="#提交通过" class="headerlink" title="提交通过"></a>提交通过</h2><p><img src="http://img.yukio.top/blog/post/20220318/17-10-42-b54cad.jpg" alt="提交通过"></p><h1 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h1><p>简单提一下，和差分思想对照的的前缀和，每次累加记录当前和为前缀和，后面再求累加只需要用前缀和+当前值即可得出结果。</p><p>其实可以理解为差分就是惰性求和，前缀和为提前求和。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杭州 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
