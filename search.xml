<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker部署Nginx镜像</title>
      <link href="/posts/f3b67776.html"/>
      <url>/posts/f3b67776.html</url>
      
        <content type="html"><![CDATA[<h2 id="nginx镜像拉取"><a href="#nginx镜像拉取" class="headerlink" title="nginx镜像拉取"></a>nginx镜像拉取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h2 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h2><p>根目录 <em>&#x2F;home&#x2F;docker&#x2F;nginx&#x2F;</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ./conf</span><br><span class="line"><span class="built_in">mkdir</span> ./html</span><br><span class="line"><span class="built_in">mkdir</span> ./logs</span><br></pre></td></tr></table></figure><h2 id="启动测试容器"><a href="#启动测试容器" class="headerlink" title="启动测试容器"></a>启动测试容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##启动测试容器</span></span><br><span class="line">docker run --name <span class="built_in">test</span> -d nginx</span><br><span class="line"></span><br><span class="line"><span class="comment">##复制配置文件</span></span><br><span class="line">docker <span class="built_in">cp</span> <span class="built_in">test</span>:/etc/nginx/nginx.conf /home/docker/nginx/conf/</span><br><span class="line">docker <span class="built_in">cp</span> <span class="built_in">test</span>:/etc/nginx/conf.d/default.conf  /home/docker/nginx/conf.d</span><br></pre></td></tr></table></figure><p>nginx镜像中的配置文件路径默认是<em>etc&#x2F;nginx&#x2F;nginx.conf</em>, 也可以进入镜像<em>nginx -t</em>确认下。</p><p><img src="http://r76en9bw6.hd-bkt.clouddn.com/img/iShot2022-02-14.png" alt="nginx -t"></p><p>访问下服务器ip，nginx启动默认监听80端口，确认没问题就<em>docker rm</em>掉刚刚的test容器，开始正式部署。</p><h2 id="正式部署"><a href="#正式部署" class="headerlink" title="正式部署"></a>正式部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx --privileged -it -p 80:80 \</span><br><span class="line">-v /home/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:ro \</span><br><span class="line">-v /home/docker/nginx/conf/conf.d:/etc/nginx/conf.d:ro \</span><br><span class="line">-v /home/docker/nginx/html:/usr/share/nginx/html:rw  \</span><br><span class="line">-v /home/docker/nginx/logs:/var/log/nginx \</span><br><span class="line">-d nginx</span><br></pre></td></tr></table></figure><p>启动后<em>docker ps -a</em>查看下容器状态。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="ngxin访问403"><a href="#ngxin访问403" class="headerlink" title="ngxin访问403"></a>ngxin访问403</h3><p>有几种可能：</p><p>1.容器html挂载错误</p><p><em>docker exec -it 容器id &#x2F;bin&#x2F;bash</em>进入容器内部确认下挂载路径下有没有对应html文件。</p><p>2.nginx启动用户错误</p><p>docker启动ngxin用的是root用户，而nginx默认配置文件中用的是nginx用户。</p><p><img src="http://r76en9bw6.hd-bkt.clouddn.com/img/iShot2022-02-14.21.07.43.jpg" alt="ngixn-config"></p><p>3.其他</p><p>其他问题使用命令<em>docker logs 容器id</em>，看下日志具体是什么错误，具体解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杭州 </tag>
            
            <tag> Docker </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring循环依赖</title>
      <link href="/posts/a5d86a59.html"/>
      <url>/posts/a5d86a59.html</url>
      
        <content type="html"><![CDATA[<center>_Spring循环依赖的三种方式..._</center><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring相关知识中比较基础和常见的内容，一直没有记录下来。</p><h3 id="Spring依赖注入三种方式"><a href="#Spring依赖注入三种方式" class="headerlink" title="Spring依赖注入三种方式"></a>Spring依赖注入三种方式</h3><h4 id="构造器参数循环依赖"><a href="#构造器参数循环依赖" class="headerlink" title="构造器参数循环依赖"></a>构造器参数循环依赖</h4><p>Spring容器会将每一个正在创建的Bean 标识符放在一个<strong>当前创建Bean池</strong>中，Bean标识符在创建过程中将一直保持在这个池中，因此如果在创建Bean过程中发现自己已经在<strong>当前创建Bean池</strong>里时将抛出BeanCurrentlyInCreationException异常表示循环依赖；而对于创建完毕的Bean将从<strong>当前创建Bean池</strong>中清除掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentA</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentB studentB ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentB</span><span class="params">(StudentB studentB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentB = studentB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentA</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentA</span><span class="params">(StudentB studentB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentB = studentB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentC studentC ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentC</span><span class="params">(StudentC studentC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentC = studentC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentB</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentB</span><span class="params">(StudentC studentC)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentC = studentC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentC</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentA studentA ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentA</span><span class="params">(StudentA studentA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentA = studentA;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentC</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentC</span><span class="params">(StudentA studentA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentA = studentA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>三个类StudentA有参构造是StudentB。StudentB的有参构造是StudentC，StudentC的有参构造是StudentA ，这样就产生了一个循环依赖的情况。</p><p>我们都把这三个Bean交给Spring管理，并用有参构造实例化：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentA&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentB&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentC&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;com/zfx/student/applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//System.out.println(context.getBean(&quot;a&quot;, StudentA.class));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:</span><br><span class="line">Error creating bean with name <span class="string">&#x27;a&#x27;</span>: Requested bean is currently in creation: Is there an unresolvable circular reference?</span><br></pre></td></tr></table></figure><p>原因：Spring容器先创建单例StudentA，StudentA依赖StudentB，然后将A放在<strong>当前创建Bean池</strong>中，此时创建StudentB,StudentB依赖StudentC ,然后将B放在<strong>当前创建Bean池</strong>中,此时创建StudentC，StudentC又依赖StudentA， 但是，此时Student已经在池中，所以会报错，，因为在池中的Bean都是未初始化完的，所以会依赖错误 ，（初始化完的Bean会从池中移除）</p><h4 id="Setter方式单例，默认方式"><a href="#Setter方式单例，默认方式" class="headerlink" title="Setter方式单例，默认方式"></a>Setter方式单例，默认方式</h4><p>如果要说setter方式注入的话，我们最好先看一张Spring中Bean实例化的图</p><p><a href="https://imgchr.com/i/VK0FeS"><img src="https://s2.ax1x.com/2019/05/30/VK0FeS.md.jpg" alt="VK0FeS.md.jpg"></a></p><p>如图中前两步骤得知：Spring是先将Bean对象实例化之后再设置对象属性的</p><p>修改配置文件为set方式注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--scope=&quot;singleton&quot;(默认就是单例方式)  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentA&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentB&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentB&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentC&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentC&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentA&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类同上，打印结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.zfx.student.StudentA@1fbfd6</span><br></pre></td></tr></table></figure><p>为什么用set方式就不报错了呢？<br>    我们结合上面那张图看，Spring先是用构造实例化Bean对象 ，此时Spring会将这个实例化结束的对象放到一个Map中，并且Spring提供了获取这个未设置属性的实例化对象引用的方法。<br>结合我们的实例来看，，当Spring实例化了StudentA、StudentB、StudentC后，紧接着会去设置对象的属性，此时StudentA依赖StudentB，就会去Map中取出存在里面的单例StudentB对象，以此类推，不会出来循环的问题。</p><h4 id="setter方式原型，prototype"><a href="#setter方式原型，prototype" class="headerlink" title="setter方式原型，prototype"></a>setter方式原型，prototype</h4><p>修改配置文件为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentA&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentB&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentB&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentC&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zfx.student.StudentC&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentA&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>scope&#x3D;”prototype” 意思是 每次请求都会创建一个实例对象。两者的区别是：有状态的bean都使用Prototype作用域，无状态的一般都使用singleton单例作用域。</p><p>打印结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:</span><br><span class="line">Error creating bean with name <span class="string">&#x27;a&#x27;</span>: Requested bean is currently in creation: Is there an unresolvable circular reference?</span><br></pre></td></tr></table></figure><p>为什么原型模式就报错了呢？<br>对于<strong>prototype</strong>作用域Bean，Spring容器无法完成依赖注入，因为<strong>prototype</strong>作用域的Bean，Spring容器不进行缓存，因此无法提前暴露一个创建中的Bean。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>prototype</strong>使用的不多，所有主要需要区分的还是构造器注入和Setter注入两种方式，他们的区别在于构造器注入是“构造”，即“创建”的时候就要去注入依赖，所有会造成循环依赖报错，而Setter注入是先构造对象，再通过Setter方法注入属性，所以循环依赖不会报错，理解了这个就很清楚了。</p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型extends和super</title>
      <link href="/posts/7a59090.html"/>
      <url>/posts/7a59090.html</url>
      
        <content type="html"><![CDATA[<center>_困扰了很久的问题_</center><span id="more"></span><p>秉承着做一个真诚的人的原则，在文章开头我要声明，这篇文章大部分内容都是copy的，因为大牛们已经讲得十分详细，锦上添花的空间都没有了。参考链接会放在文末。</p><h3 id="前景"><a href="#前景" class="headerlink" title="前景"></a>前景</h3><p>不带继承的泛型使用很简单，基本上熟悉了Java多态就能很轻松的使用，但是日常中阅读源码时经常会碰到具有继承关系的泛型使用，<strong>extends</strong> 和 <strong>super</strong> ，例如Collections中的copy方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">copy</span><span class="params">(List&lt;? <span class="built_in">super</span> T&gt; dest, List&lt;? extends T&gt; src)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">srcSize</span> <span class="operator">=</span> src.size();</span><br><span class="line">    <span class="keyword">if</span> (srcSize &gt; dest.size())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Source does not fit in dest&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (srcSize &lt; COPY_THRESHOLD ||</span><br><span class="line">        (src <span class="keyword">instanceof</span> RandomAccess &amp;&amp; dest <span class="keyword">instanceof</span> RandomAccess)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++)</span><br><span class="line">            dest.set(i, src.get(i));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ListIterator&lt;? <span class="built_in">super</span> T&gt; di=dest.listIterator();</span><br><span class="line">        ListIterator&lt;? <span class="keyword">extends</span> <span class="title class_">T</span>&gt; si=src.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;srcSize; i++) &#123;</span><br><span class="line">            di.next();</span><br><span class="line">            di.set(si.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就有点糊，往往一带而过，知道这个函数大概是接收个什么参数然后就继续往下看实现了，但长期以往总是一知半解，基础就很薄弱了，说起什么好像都懂一点但做起来就磕磕碰碰。搞技术一定要稳扎稳打，不能畏难，不能抱有侥幸。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>首先，**&lt;? extends T&gt;** 和 <strong>&lt;? super T&gt;</strong> 是Java泛型中的“通配符（Wildcards）”和“边界（Bounds）”的概念。</p><blockquote><? extends T>：是指 “上界通配符（Upper Bounds Wildcards）”   <? super T>：是指 “下界通配符（Lower Bounds Wildcards）”</blockquote><p><strong>里氏替换原则</strong></p><blockquote><p>子类完全拥有父类的方法，且具体子类必须实现父类的抽象方法。<br>子类中可以增加自己的方法。<br>当子类覆盖或实现父类的方法时，方法的形参要比父类方法的更为宽松。<br>当子类覆盖或实现父类的方法时，方法的返回值要比父类更严格。     </p></blockquote><p><strong>协变和逆变</strong><br>逆变与协变用来描述类型转换（type transformation）后的继承关系，其定义：如果A、B表示类型，f(⋅)表示类型转换，≤表示继承关系（比如，A≤B表示A是由B派生出来的子类；</p><blockquote><p>f(⋅)是逆变（contravariant）的，当A≤B时有f(B)≤f(A)成立；<br>f(⋅)是协变（covariant）的，当A≤B时有f(A)≤f(B)成立；<br>f(⋅)是不变（invariant）的，当A≤B时上述两个式子均不成立，即f(A)与f(B)相互之间没有继承关系；</p></blockquote><h3 id="为什么要使用通配符"><a href="#为什么要使用通配符" class="headerlink" title="为什么要使用通配符"></a>为什么要使用通配符</h3><p>举个例子，我们现在用Fruit类和他的派生类Apple，和一个最简单的容器类：Plate。Plate可以放一个“泛型”的东西。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fruit</span> <span class="keyword">extends</span> <span class="title class_">Food</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Apple</span> <span class="keyword">extends</span> <span class="title class_">Fruit</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Plate</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T item;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Plate</span><span class="params">(T t)</span>&#123;item=t;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T t)</span>&#123;item=t;&#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span>&#123;<span class="keyword">return</span> item;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我定义一个“水果盘子”，逻辑上水果盘子当然可以装苹果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plate&lt;Fruit&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br></pre></td></tr></table></figure><p>但实际上Java编译器不允许这个操作。会报错，“装苹果的盘子”无法转换成“装水果的盘子”。编辑器的逻辑是：</p><blockquote><p>苹果 IS-A 水果<br>装苹果的盘子 NOT-IS-A 装水果的盘子</p></blockquote><p>容器里装的东西之间具有继承关系，但是容器之间是没有继承关系的。为了解决这个问题，&lt;? extends T&gt; 和 &lt;? super T&gt;就被发明了。<br>而Java中的泛型是不变的，extends和super从根本上讲是为了把数据类型的关系延续到容器上，实现协变和逆变。</p><h3 id="协变和逆变"><a href="#协变和逆变" class="headerlink" title="协变和逆变"></a>协变和逆变</h3><p><strong>&lt;? extends T&gt;</strong> 实现了泛型的协变，例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plate&lt;? <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;();</span><br><span class="line"><span class="comment">//泛型擦除后，变为：</span></span><br><span class="line">Plate&lt;Apple&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;();</span><br></pre></td></tr></table></figure><p><strong>&lt;? super T&gt;</strong> 实现了泛型的逆变，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Plate&lt;? <span class="built_in">super</span> Fruit&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Food&gt;();</span><br><span class="line"><span class="comment">//泛型擦除后，变为：</span></span><br><span class="line">Plate&lt;Food&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Food&gt;();</span><br></pre></td></tr></table></figure><p>通过 <strong>&lt;? extends T&gt;</strong> 和 <strong>&lt;? super T&gt;</strong> 实现了泛型的协变和逆变，而且没有破坏里氏替换原则。</p><h3 id="上下界通配符的副作用"><a href="#上下界通配符的副作用" class="headerlink" title="上下界通配符的副作用"></a>上下界通配符的副作用</h3><p>先看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Plate&lt;? <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; plate = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;&gt;();</span><br><span class="line">plate.set(<span class="keyword">new</span> <span class="title class_">Apple</span>()); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><h4 id="上界-lt-extends-T-gt-不能往里存，只能往外取"><a href="#上界-lt-extends-T-gt-不能往里存，只能往外取" class="headerlink" title="上界&lt;? extends T&gt;不能往里存，只能往外取"></a>上界&lt;? extends T&gt;不能往里存，只能往外取</h4><p>IntellIj会检测到编译时异常，通常我们会觉得，plate是个装水果的盘子，为什么不能装苹果？因为编译器没办法确定Plate存放的具体的元素类型，只能知道是个Fruit的子类，你放了一个Apple，Apple是Fruit的子类，但是编译器不能确定Plate中要放的是不是Apple。**&lt;? extends T&gt;** 只能确保Plate中的元素一定是Fruit的子类，并不是指只要是Fruit的子类就一定能放到Plate中，所以叫做 <strong>上界通配符</strong>。   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Plate&lt;? <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; p = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Apple&gt;(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能存入任何元素</span></span><br><span class="line">p.set(<span class="keyword">new</span> <span class="title class_">Fruit</span>());    <span class="comment">//Error</span></span><br><span class="line">p.set(<span class="keyword">new</span> <span class="title class_">Apple</span>());    <span class="comment">//Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取出来的东西只能存放在Fruit或它的基类里。</span></span><br><span class="line"><span class="type">Fruit</span> <span class="variable">newFruit1</span> <span class="operator">=</span> p.get();</span><br><span class="line"><span class="type">Object</span> <span class="variable">newFruit2</span> <span class="operator">=</span> p.get();</span><br><span class="line"><span class="type">Apple</span> <span class="variable">newFruit3</span> <span class="operator">=</span> p.get();    <span class="comment">//Error</span></span><br></pre></td></tr></table></figure><p>同理，取的时候不能用Apple去接，只能用Fruit或者Fruit的基类去接。</p><h4 id="下界-lt-super-T-gt-不影响往里存，但往外取只能放在Object对象里"><a href="#下界-lt-super-T-gt-不影响往里存，但往外取只能放在Object对象里" class="headerlink" title="下界&lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里"></a>下界&lt;? super T&gt;不影响往里存，但往外取只能放在Object对象里</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Plate&lt;? <span class="built_in">super</span> Fruit&gt; p = <span class="keyword">new</span> <span class="title class_">Plate</span>&lt;Fruit&gt;(<span class="keyword">new</span> <span class="title class_">Fruit</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//存入元素正常</span></span><br><span class="line">p.set(<span class="keyword">new</span> <span class="title class_">Fruit</span>());</span><br><span class="line">p.set(<span class="keyword">new</span> <span class="title class_">Apple</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取出来的东西只能存放在Object类里。</span></span><br><span class="line"><span class="type">Apple</span> <span class="variable">newFruit3</span> <span class="operator">=</span> p.get();    <span class="comment">//Error</span></span><br><span class="line"><span class="type">Fruit</span> <span class="variable">newFruit1</span> <span class="operator">=</span> p.get();    <span class="comment">//Error</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">newFruit2</span> <span class="operator">=</span> p.get();</span><br></pre></td></tr></table></figure><p>当时用 <strong>&lt;? super T&gt;</strong> 时，编译器会知道Plate中的元素一定是Fruit或Fruit的基类，而Apple是Fruit的子类，所以可以向Plate中添加Apple，但取的时候不能确定取出来究竟是Fruit的哪个父类，只能用所有对象的父类Object来接收，元素的类型信息就会丢失。</p><h3 id="PECS-Producer-Extends-Consumer-Super"><a href="#PECS-Producer-Extends-Consumer-Super" class="headerlink" title="PECS (Producer Extends Consumer Super)"></a>PECS (Producer Extends Consumer Super)</h3><p>究竟什么时候用extends什么时候用super呢？《Effective Java》给出了答案：    </p><p>例如，一个简单的Stack API：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Stack</span>&lt;E&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>:</span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现pushAll(Iterable<E> src)方法，将src的元素逐一入栈：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushAll</span><span class="params">(Iterable&lt;E&gt; src)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(E e : src)</span><br><span class="line">        push(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设有一个实例化Stack<Number>的对象stack，src有Iterable<Integer>与 Iterable<Float>；在调用pushAll方法时会发生type mismatch错误，因为Java中泛型是不可变的，Iterable<Integer>与 Iterable<Float>都不是Iterable<Number>的子类型。因此，应改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pushAll</span><span class="params">(Iterable&lt;? extends E&gt; src)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (E e : src)</span><br><span class="line">        push(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现popAll(Collection<E> dst)方法，将Stack中的元素依次取出add到dst中，如果不用通配符实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">popAll</span><span class="params">(Collection&lt;E&gt; dst)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!isEmpty())</span><br><span class="line">        dst.add(pop());   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，假设有一个实例化Stack<Number>的对象stack，dst为Collection<Object>；调用popAll方法是会发生type mismatch错误，因为Collection<Object>不是Collection<Number>的子类型。因而，应改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">popAll</span><span class="params">(Collection&lt;? <span class="built_in">super</span> E&gt; dst)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (!isEmpty())</span><br><span class="line">    dst.add(pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述例子中，在调用pushAll方法时生产了E 实例（produces E instances），在调用popAll方法时dst消费了E 实例（consumes E instances）。Naftalin与Wadler将PECS称为Get and Put Principle。</p><p>再回到文章开头java.util.Collections的copy方法，<strong>List&lt;? extends T&gt; src</strong> 生产了T实例 <strong>List&lt;? super T&gt; dest</strong> 消费了T实例，总结一下就是：</p><blockquote><p>要从泛型类取数据时，用extends；<br>要往泛型类写数据时，用super；<br>既要取又要写，就不用通配符（即extends与super都不用）。</p></blockquote><h3 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h3><p>【1】Treant <a href="http://www.cnblogs.com/en-heng/">Java中的逆变与协变</a><br>【2】Mr.Seven <a href="https://itimetraveler.github.io/2016/12/27/%E3%80%90Java%E3%80%91%E6%B3%9B%E5%9E%8B%E4%B8%AD%20extends%20%E5%92%8C%20super%20%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F/">Java泛型中 extends 和 super 的区别？</a><br>【3】yi_afly <a href="https://blog.csdn.net/yi_afly/article/details/52002594">Java泛型的实现：原理与问题</a></p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/posts/e8eb0481.html"/>
      <url>/posts/e8eb0481.html</url>
      
        <content type="html"><![CDATA[<center>_即使最简单的算法也有很多的细节_</center><span id="more"></span><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><strong>二分查找</strong> 也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字 <strong>有序排列</strong>。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>假设R[low…high]是当前的查找区间，key为需要查找的值。<br>1、先确定该区间的中间位置：<strong>mid &#x3D; （low+high）&#x2F;2</strong>。<br>2、将key值域R[mid]比较：若相等，则查找成功并返回此位置，否则进一步确定新的查找区间:<br>&amp;emsp;&amp;emsp;a、若R[mid]&gt;key，则可知，如果表中存在关键字等于key的结点，则该结点位置一定位于mid的左边的子表R[1…mid-1]中。<br>&amp;emsp;&amp;emsp;a、若R[mid]&lt;key，则可知，如果表中存在关键字等于key的结点，则该结点位置一定位于mid的右边的子表R[mid+1…high]中。<br>3、每经过一次查找，查找区间就会减半，重复这一过程直到找到关键字为key的结点，或缩减至查找子区间右侧小于左侧，则区间不存在，查找失败，按照一般约定，没有找到目标元素，则把应该插入目标元素的位置返回。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="循环实现"><a href="#循环实现" class="headerlink" title="循环实现"></a>循环实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            <span class="comment">//不要用（low+high）/2,可能溢出。规范：low + (high - low) / 2;</span></span><br><span class="line">            mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到目标元素，则把应该插入的位置返回</span></span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRecur</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearchRecur(arr, key, mid + <span class="number">1</span>, high);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearchRecur(arr, key, low, mid - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是获取mid值得时候不要直接使用：<strong>mid &#x3D; （low+high）&#x2F;2</strong>，因为当 <strong>low+high&gt;Integer.Max</strong> 的时候会溢出，所以要用 <strong>mid &#x3D; low + (high - low) &#x2F; 2</strong> 来获取mid的值。</p><h4 id="包含重复元素数组"><a href="#包含重复元素数组" class="headerlink" title="包含重复元素数组"></a>包含重复元素数组</h4><p>上面两个方法只能处理不包含重复数据的数组，否则返回结果会不准确<br>例：当时组为 int a[] &#x3D; {1, 2, 3, 4, 5, 7, 7, 9, 10} 时<br>第一次查找区间缩减为{7, 7, 9, 10}, low&#x3D;5，high&#x3D;8，此时mid&#x3D;6，a[6]&#x3D;7, 查找成功返回结点位置6，但数组a中第一次出现7的位置应该是a[5],而不是a[6];</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">firstOccurrence</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> mid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt;= key) &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">firstOccurrenceRecur</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> low;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearchRecur(arr, key, mid + <span class="number">1</span>, high);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearchRecur(arr, key, low, mid - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过与上面代码比较发现仅仅是修改判定条件 <strong>arr[mid] &gt; key</strong> 为 <strong>arr[mid] &gt;&#x3D; key</strong>，这样当arr[mid] &#x3D; key时，会继续执行循环体，而不是直接返回查找到的位置，在这次循环中，主要是判断arr[mid-1]是否等于key，如果相等则第一次出现关键字为key的结点的位置就会前移一位。high不断向low逼近，直到high&lt;low，此时循环结束，返回第一次出现关键字为key的结点位置。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>二分查找的时间复杂度为O(logn)，远远好于顺序查找的O(n)。但是使用二分查找前，必须将表按关键字排序，而排序本身是一种比较费时的运算，即使采用高效的排序方法也要花费O(nlogn)的时间。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>根据二分查找的优缺点我们可以想到，二分查找特别适用于那种一经建立就很少改动，而又经常需要查找的线性表。</p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域与解决方案</title>
      <link href="/posts/e2be36a1.html"/>
      <url>/posts/e2be36a1.html</url>
      
        <content type="html"><![CDATA[<center>_跨向全栈..._</center><span id="more"></span><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p><strong>前后端分离项目</strong> 经常需要处理跨域问题，总所周知，跨域问题是由于浏览器的 <em>同源策略</em> 导致的。所以先介绍下浏览器同源策略： <strong>“如果两个页面的协议，域名和端口（如果有指定）都相同，则两个页面具有相同的源。”</strong></p><p>例如相对于<a href="http://www.yangmiemie.info/index/page.html">http://www.yangmiemie.info/index/page.html</a>网址：</p><table><thead><tr><th>URL</th><th>同源</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.yangmiemie.info/index/other.html">http://www.yangmiemie.info/index/other.html</a></td><td>成功</td><td></td></tr><tr><td><a href="http://www.yangmiemie.info/index/inner/another.html">http://www.yangmiemie.info/index/inner/another.html</a></td><td>成功</td><td></td></tr><tr><td><a href="https://www.yangmiemie.info/secure.html">https://www.yangmiemie.info/secure.html</a></td><td>失败</td><td>不同协议 ( https和http )</td></tr><tr><td><a href="http://www.yangmiemie.info:81/index/etc.html">http://www.yangmiemie.info:81/index/etc.html</a></td><td>失败</td><td>不同端口 ( 81和80)</td></tr><tr><td><a href="http://github.yangmiemie.info/index/other.html">http://github.yangmiemie.info/index/other.html</a></td><td>失败</td><td>不同域名 ( www和github )</td></tr></tbody></table><p>不同源的网址访问就会发生跨域问题，主要是浏览器为了防止CSRF攻击，什么是CSRF攻击就不展开讲了，简单描述一下就是现在绝大部分浏览器都是cookie共享的，如果你同时打开了网站A和钓鱼网站B，由于你已经登陆了网站A，sessionId已经储存在cookie中，网站B可以利用网站A的cookie发起直接向网站A服务器发起恶意请求，实现攻击操作。由于有同源策略，网站B发起的Ajax请求就会失败。</p><p>那么如果我们的项目是前后端分离的，前后端部署在不同的服务器上，发起的请求也都是不同源的，这个时候就需要实现跨域访问了。一般跨域解决方案有两种，<strong>jsonp</strong> 和 <strong>cors</strong>。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p>jsop解决跨域问题较为简单粗暴，基本思想是，网页通过添加一个&lt;script&gt;元素，向服务器请求JSON数据，这种做法不受同源政策限制( <strong>拥有”src”这个属性的标签都拥有跨域的能力</strong> )；服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。jsonp需要在URL后追加一个 <strong>callback</strong> 参数指定回调函数名。<br>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addScriptTag</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    script.<span class="title function_">setAttribute</span>(<span class="string">&quot;type&quot;</span>,<span class="string">&quot;text/javascript&quot;</span>);</span><br><span class="line">    script.<span class="property">src</span> = src;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">addScriptTag</span>(<span class="string">&#x27;http://www.yangmiemie.info/getUserName?id=001&amp;callback=show&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;username is &#x27;</span> + data.<span class="property">username</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码是jsonp的实现原理，平时如果使用jquery进行跨域请求，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">         <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">         <span class="attr">url</span>: <span class="string">&quot;http://www.yangmiemie.info/getUserName?id=001&quot;</span>,</span><br><span class="line">         <span class="attr">dataType</span>: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">         <span class="attr">jsonp</span>: <span class="string">&quot;callback&quot;</span>,<span class="comment">//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span></span><br><span class="line">         <span class="attr">jsonpCallback</span>:<span class="string">&quot;show&quot;</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span></span><br><span class="line">         <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;username is &#x27;</span> + data.<span class="property">username</span>);</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fail&#x27;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><p>服务器支持jsonp，必须通过jsonp参数获取jsonp回调函数名的参数名，然后按指定格式返回，所以可以在后台添加逻辑控制，比如指定可以跨域接口，来确保服务器安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">callback</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;callback&quot;</span>); <span class="comment">//不指定函数名默认 callback</span></span><br><span class="line"><span class="keyword">return</span> callback + <span class="string">&quot;(&quot;</span> + jsonStr + <span class="string">&quot;)&quot;</span></span><br></pre></td></tr></table></figure><p>需要注意的是jsonp只能发送 <strong>get</strong> 请求。</p><h4 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h4><p>相对于 <strong>jsonp</strong>， <strong>cors</strong>原理较为复杂，但是使用cors非常简单，因为现在大多数浏览器的支持，整个cors的通信过程，都是浏览器自动完成的，不需要用户参与。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><h5 id="两种请求"><a href="#两种请求" class="headerlink" title="两种请求"></a>两种请求</h5><p>浏览器将cors请求分成两类，简单请求和非简单请求，只要同时满足以下两大条件，就属于简单请求。</p><blockquote><p>(1) 请求方法是以下三种方法之一：<br>   HEAD<br>   GET<br>   POST<br>(2) HTTP的头信息不超出以下几种字段：<br>   Accept<br>   Accept-Language<br>   Content-Language<br>   Last-Event-ID<br>   Content-Type：只限于三个值application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</p></blockquote><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><p>对于简单请求，浏览器直接发出CORS请求。具体来说，就是在头信息之中，增加一个Origin字段。<br>下面是一个例子，浏览器发现这次跨源AJAX请求是简单请求，就自动在头信息之中，添加一个Origin字段。</p><blockquote><p>GET &#x2F;cors HTTP&#x2F;1.1<br>Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Host: api.alice.com<br>Accept-Language: en-US<br>Connection: keep-alive<br>User-Agent: Mozilla&#x2F;5.0…  </p></blockquote><p>Origin字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。服务器根据这个值，决定是否同意这次请求。</p><h5 id="非简单请求"><a href="#非简单请求" class="headerlink" title="非简单请求"></a>非简单请求</h5><p>当请求方法不满足简单请求的两大条件时，比如请求方法是PUT或DELETE，或者Content-Type字段类型是application&#x2F;json，该次请求就属于非简单请求。</p><p>非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight）。</p><p>预检请求响应头</p><blockquote><p>OPTIONS &#x2F;cors HTTP&#x2F;1.1<br>Origin: <a href="http://api.bob.com/">http://api.bob.com</a><br>Access-Control-Request-Method: PUT<br>Access-Control-Request-Headers: X-Custom-Header<br>Host: api.alice.com<br>Accept-Language: en-US<br>Connection: keep-alive<br>User-Agent: Mozilla&#x2F;5.0…  </p></blockquote><h5 id="cors总结"><a href="#cors总结" class="headerlink" title="cors总结"></a>cors总结</h5><p>使用CORS解决跨域问题，简单来看就是在请求的请求头中添加了 <strong>Origin</strong> 字段，该字段包含请求的发起域名，服务器的响应头中包含了 <strong>Access-Control-Allow-Origin</strong> 字段，该字段包含服务器支持的域名。再加上其他可选附带字段，提供更多信息，例如 **<br>Access-Control-Allow-Methods** 、 <strong>Access-Control-Allow-Headers</strong> 、 <strong>Access-Control-Max-Age</strong> 等，这个过程客户端编码过程是无感知的，也就是说普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，可以通过服务端代码实现，也可以通过nginx配置，而前端无须设置，若要带cookie请求：服务端端需要另外开启 <strong>Access-Control-Allow-Credentials: true</strong> ，前端需要AJAX请求中打开 <strong>withCredentials</strong> 属性。</p><h4 id="jsonp和cors对比"><a href="#jsonp和cors对比" class="headerlink" title="jsonp和cors对比"></a>jsonp和cors对比</h4><p>jsonp和cors但就使用来说都较为简单，实现原理jsonp较为简单，便于理解，但是jsonp只能支持 <strong>get</strong> 请求，cors不受此限制。<br>cors更为强大和规范，jsonp更像一种早期开发者通过自身智慧想到的解决跨域问题的方案，后来用的人多了就成了一种默认的方法，而cors受到浏览器和服务端的支持，更为规范。个人建议还是使用cors来解决跨域问题。</p><h4 id="其他跨域方案"><a href="#其他跨域方案" class="headerlink" title="其他跨域方案"></a>其他跨域方案</h4><p>跨域问题其实还有很多种解决方案，包括前端到后端，总觉得一个开发者视界应该广阔些，不应局限于一种技术、语言、解决方案，才能更从容地应对千变万化的需求。</p><p>下面几种方案只简单介绍一下</p><blockquote><p>iframe</p></blockquote><p>使用iframe实现跨域，更类似于两个不同域名的网站通过iframe拼接到一起。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父窗口：(http://www.domain.com/a.html)</span></span><br><span class="line">&lt;iframe id=<span class="string">&quot;iframe&quot;</span> src=<span class="string">&quot;http://child.domain.com/b.html&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> user = <span class="string">&#x27;admin&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 子窗口：(http://child.domain.com/b.html)</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="property">domain</span> = <span class="string">&#x27;domain.com&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 获取父窗口中变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">alert</span>(<span class="string">&#x27;get js data from parent ---&gt; &#x27;</span> + <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="property">user</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>nginx代理和Nodejs中间件代理跨域</p></blockquote><p>同源策略是浏览器的安全策略，不是HTTP协议的一部分。服务器端调用HTTP接口只是使用HTTP协议，不会执行JS脚本，不需要同源策略，也就不存在跨越问题。所以通过搭建一个代理服务器，转发请求以解决跨域问题。</p><blockquote><p>WebSocket协议跨域</p></blockquote><p>WebSocket已经更换了协议，都不是http\https了，它实现了浏览器与服务器全双工通信，同时允许跨域通讯，使用较少。</p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘录</title>
      <link href="/posts/9b6a3ba2.html"/>
      <url>/posts/9b6a3ba2.html</url>
      
        <content type="html"><![CDATA[<center>_士大夫三日不读书,则义理不交于胸中,对镜觉面目可憎,向人亦语言无味。_</center><span id="more"></span><h3 id="《金阁寺》"><a href="#《金阁寺》" class="headerlink" title="《金阁寺》"></a>《金阁寺》</h3><blockquote><p>我又想起那只立于屋顶，经受长年风吹雨打的金铜凤凰。这神秘的金乌，既不报时，也不奋飞，一定忘记自己是一只鸟吧？然而，以为它不飞是错误的。别的鸟都在空中飞翔，这只金凤凰也应该是展开光明的羽翼，永远飞翔于时间的海洋里。<br>时间的波浪不住地扑打着这双羽翼，接着向后方流逝。只因为在奋飞，凤凰只要显示出不动的姿态，怒目而视，高展羽翼，翻动羽尾，用金色的双腿稳稳站立，这就够了。<br>这样一想，我觉得金阁本身就是一艘渡过时间的大海驶来的美丽的航船。美术书上所谓“壁少儿通风的建筑”，就是想象为船的结构，以复杂的三层屋行船面临水池，也就是引发人们的想象，把池水当做海洋的象征。金阁度过了众多的夜晚，这样的航海无穷无尽。而且，白昼里，这只奇异的航船停泊下来，供俗众任意游览；夜间，借助周围的黑暗，鼓起屋形的船帆继续启碇航行。</p></blockquote><h3 id="《月亮与六便士》"><a href="#《月亮与六便士》" class="headerlink" title="《月亮与六便士》"></a>《月亮与六便士》</h3><blockquote><p>格言警句还不是无趣的人冒充机敏的呆板工具，一些温文尔雅之人随便闲聊几句就会字字珠玑。</p></blockquote><blockquote><p>这一定是世间无数夫妻的剧本，这样的生活模式虽然平凡，但也不啻为恩惠，会让人想起一条缓缓流过的小河。蜿蜒流过绿草如茵的牧场，在郁郁葱葱的树荫庇护下，汇入汪洋大海。但大海是那样的平静、淡然、波澜不惊，你会突然觉得隐隐不安。也许这只是我的胡思乱想，但即使在当时这样的想法也非常强烈，我总觉得芸芸众生如此度过一生总有什么不妥。我承认这样的生活的社会价值，也知道这是一种有条不紊的幸福生活，但我却有一腔不甘平庸的热血，渴望踏上一条更为放荡不羁的险途。而这种从容的快乐让我感到莫名惶恐。我内心渴望过上更为惊险的生活，只要我能做出改变，我指的是那种无法预知的改变和刺激，我便准备踏上怪石嶙峋的山峦和凶险莫测的海滩。</p></blockquote><blockquote><p>但我知道她这样做并不是出于善心。有人说苦难会让人变得高风亮节，其实不然，有时幸福的生活才会让人的情操变得高尚，苦难在大多数情况下只会让人变得心胸狭窄，苦大仇深。</p></blockquote><blockquote><p>人们满不在乎地谈论美，却对遣词造句没有任何感觉，他们只是随意的使用“美”这个字，因此，真正具有“美”的事物便被剥夺了崇高地位。他们把一条裙子、一只狗、一次布道都称为美，而当他们面对真正的美时，却辨认不出来。他们虚假的强调美，用以装饰他们那毫无价值的思想，削弱他们本就脆弱的情感。这就像江湖骗子随意伪造某种器物的神秘力量一样，人们已经失去了他们随意滥用的鉴赏能力。</p></blockquote><h3 id="《套中人》"><a href="#《套中人》" class="headerlink" title="《套中人》"></a>《套中人》</h3><blockquote><p>也许是为自己的胆怯，为自己对现实的厌恶辩护吧，他总是赞扬过去，赞扬不曾有过的东西</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> reading </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring属性注册编辑器</title>
      <link href="/posts/1b561c1b.html"/>
      <url>/posts/1b561c1b.html</url>
      
        <content type="html"><![CDATA[<center>_Spring DI..._</center><span id="more"></span><h3 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h3><p><strong>Spring DI</strong> 注入的时候可以很轻松的注入普通变量，也可以通过嵌套注入对象，但嵌套的对象的属性还是普通变量。假如我们要注入一个 <em>Date</em> 类型就会比较麻烦。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManger</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Date dataValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getDataValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dataValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataValue</span><span class="params">(Date dataValue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataValue = dataValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;UserManger&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dataValue=&quot;</span> + dataValue +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中对日期属性进行注入：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userManger&quot;</span> <span class="attr">class</span>=<span class="string">&quot;spring.entity.UserManger&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataValue&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2018-07-25<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testData</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-web-context.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserManger</span> <span class="variable">userManger</span> <span class="operator">=</span> (UserManger) ctx.getBean(<span class="string">&quot;userManger&quot;</span>);</span><br><span class="line">    System.out.println(userManger);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果按照我们常规这样使用，程序就会报错，因为UserManager中的dataValue属性是 <em>Date</em> 类型，而在XML配置中却是 <em>String</em> 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name <span class="string">&#x27;userManger&#x27;</span> defined in <span class="keyword">class</span> <span class="title class_">path</span> resource [spring-web-context.xml]:</span><br><span class="line">Initialization of bean failed; nested exception is org.springframework.beans.ConversionNotSupportedException: Failed to convert</span><br><span class="line">property value of type <span class="string">&#x27;java.lang.String&#x27;</span> to required type <span class="string">&#x27;java.util.Date&#x27;</span> <span class="keyword">for</span> property <span class="string">&#x27;dataValue&#x27;</span>; nested exception is java.lang.IllegalStateException: Cannot</span><br><span class="line">convert value of type [java.lang.String] to required type [java.util.Date] <span class="keyword">for</span> property <span class="string">&#x27;dataValue&#x27;</span>: no matching editors or conversion strategy found</span><br><span class="line"></span><br><span class="line">at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">553</span>)</span><br><span class="line">    ··· ···</span><br><span class="line">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:<span class="number">47</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:<span class="number">242</span>)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:<span class="number">70</span>)</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p>Spring提供两种解决方案</p></blockquote><h4 id="使用自定义属性编辑器"><a href="#使用自定义属性编辑器" class="headerlink" title="使用自定义属性编辑器"></a>使用自定义属性编辑器</h4><p>使用自定义属性编辑器，通过继承 <strong>ProPetyEdiTorSupport</strong> ,重写 <strong>setAsText</strong> 方法，具体步骤如下。</p><h5 id="编写自定义的属性编辑器"><a href="#编写自定义的属性编辑器" class="headerlink" title="编写自定义的属性编辑器"></a>编写自定义的属性编辑器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateProPertyEditor</span> <span class="keyword">extends</span> <span class="title class_">PropertyEditorSupport</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFormat</span><span class="params">(String format)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.format = format;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;text: &quot;</span> + text);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(format);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> sdf.parse(text);</span><br><span class="line">            <span class="built_in">this</span>.setValue(d);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="将自定义的属性编辑器注册到Spring中"><a href="#将自定义的属性编辑器注册到Spring中" class="headerlink" title="将自定义的属性编辑器注册到Spring中"></a>将自定义的属性编辑器注册到Spring中</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;customEditors&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;java.util.Date&quot;</span> <span class="attr">value</span>=<span class="string">&quot;spring.DatePropertyEditor&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log4j:WARN No appenders could be found <span class="keyword">for</span> <span class="title function_">logger</span> <span class="params">(org.springframework.core.env.StandardEnvironment)</span>.</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">log4j:WARN See http:<span class="comment">//logging.apache.org/log4j/1.2/faq.html#noconfig for more info.</span></span><br><span class="line">text: <span class="number">2018</span>-<span class="number">07</span>-<span class="number">25</span></span><br><span class="line">UserManger&#123;dataValue=Wed Jul <span class="number">25</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> CST <span class="number">2018</span>&#125;</span><br></pre></td></tr></table></figure><p>主要就是在配置文件中引入 <strong>CustomEditorConfigurer</strong> ，并在属性 <strong>customEditors</strong> 中加入自定义的属性编辑器，key为属性编辑器要处理的类型，value为属性编辑器Class。通过这样配置，当Spring再注入bean的属性时一旦遇到java.util.Date类型的属性会自动调用自定义的DatePropertyEditor解析器进行解析，并用解析结果代替配置属性进行注入。</p><h4 id="注册Spring自带的属性编辑器CustomDateEditor"><a href="#注册Spring自带的属性编辑器CustomDateEditor" class="headerlink" title="注册Spring自带的属性编辑器CustomDateEditor"></a>注册Spring自带的属性编辑器CustomDateEditor</h4><h5 id="定义属性编辑器"><a href="#定义属性编辑器" class="headerlink" title="定义属性编辑器"></a>定义属性编辑器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatePropertyEditorRegistrar</span> <span class="keyword">implements</span> <span class="title class_">PropertyEditorRegistrar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerCustomEditors</span><span class="params">(PropertyEditorRegistry registry)</span> &#123;</span><br><span class="line">        registry.registerCustomEditor(Date.class, <span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>), <span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注册到Spring中"><a href="#注册到Spring中" class="headerlink" title="注册到Spring中"></a>注册到Spring中</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.CustomEditorConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;propertyEditorRegistrars&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;spring.DatePropertyEditorRegistrar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes</title>
      <link href="/posts/c0da8988.html"/>
      <url>/posts/c0da8988.html</url>
      
        <content type="html"><![CDATA[<center>_笔记..._</center><span id="more"></span><h3 id="js遍历数组"><a href="#js遍历数组" class="headerlink" title="js遍历数组"></a>js遍历数组</h3><h4 id="数组的长度只查询一次而非每次循环都要查询"><a href="#数组的长度只查询一次而非每次循环都要查询" class="headerlink" title="数组的长度只查询一次而非每次循环都要查询"></a>数组的长度只查询一次而非每次循环都要查询</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0,len=keys.length; i&lt;len; i++)&#123;</span><br><span class="line">    //循环体不变</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="稀疏数组遍历"><a href="#稀疏数组遍历" class="headerlink" title="稀疏数组遍历"></a>稀疏数组遍历</h4><p>1、排除null，undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;a.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a[i]) <span class="keyword">continue</span>;<span class="comment">//跳过null、undefined</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、跳过undefined和不存在的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;a.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] === <span class="literal">undefined</span>) <span class="keyword">continue</span>;<span class="comment">//跳过undefined和不存在的元素</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、跳过不存在的元素，仍处理undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;a.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(i <span class="keyword">in</span> a)) <span class="keyword">continue</span>;<span class="comment">//跳过undefined和不存在的元素</span></span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以使用 <strong>for&#x2F;in</strong> 循环，不存在的索引将不会遍历到<br><strong>for&#x2F;in</strong> 注意点：<br>1、<strong>for&#x2F;in</strong> 循环能枚举继承的属性名，如添加到 <strong>Array.prototype</strong> 。由于这个原因，在数组上不应该使用 <strong>for&#x2F;in</strong> 循环，除非使用额外的检测方法来过滤不想要的属性。<br>2、<strong>for&#x2F;</strong> 循环遍历对象属性顺序不确定，如果算法依赖于遍历的顺序，最好使用常规 <strong>for</strong> 循环<br>–《JavaScript权威指南》P150</p><p>*** Oracle恢复删除表<br>TableName:表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> recyclebin <span class="keyword">WHERE</span> ORIGINAL_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;TableName%&#x27;</span>;</span><br><span class="line">flashback <span class="keyword">table</span> TableName <span class="keyword">to</span> before <span class="keyword">drop</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6中export及export default的区别</title>
      <link href="/posts/e3f9c0f1.html"/>
      <url>/posts/e3f9c0f1.html</url>
      
        <content type="html"><![CDATA[<center>最近开始学习 **Vue** ，接触到了很多 **ES6** 的语法</center><span id="more"></span><h2 id="ES6的模块化的基本规则或特点"><a href="#ES6的模块化的基本规则或特点" class="headerlink" title="ES6的模块化的基本规则或特点"></a>ES6的模块化的基本规则或特点</h2><p>1、每一个模块只加载一次， 每一个JS只执行一次， 如果下次再去加载同目录下同文件，直接从内存中读取。 一个模块就是一个单例，或者说就是一个对象；<br>2、每一个模块内声明的变量都是局部变量， 不会污染全局作用域；<br>3、模块内部的变量或者函数可以通过export导出；<br>4、一个模块可以导入别的模块_</p><h2 id="export、import和export-default"><a href="#export、import和export-default" class="headerlink" title="export、import和export default"></a>export、import和export default</h2><p>export、import这两个很好理解，从字面意思就可以知道一个导出，一个导入。</p><p>export用于对外输出本模块（一个文件可以理解为一个模块）常量、函数、文件、模块；<br>import用于在一个模块中加载另一个含有export接口的模块，通过import+(常量 | 函数 | 文件 | 模块)名的方式，将其导入。</p><p>export default也是导出区别在于export default导出相当于为模块指定默认输出，export default和import时都不需要加上大括号，通过import import的就是export default的内容，因此一个文件中export可以有多个，但是export default只能有一个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Vincent&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以写成：</span></span><br><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Vincent&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br></pre></td></tr></table></figure><h2 id="几种导出方式"><a href="#几种导出方式" class="headerlink" title="几种导出方式"></a>几种导出方式</h2><h3 id="1、使用-export-导出"><a href="#1、使用-export-导出" class="headerlink" title="1、使用 export{} 导出"></a>1、使用 export{} 导出</h3><p>这里import要和export对应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Vincent&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> method = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; name, method &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, method &#125; <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2、使用-export-a-as-b-导出"><a href="#2、使用-export-a-as-b-导出" class="headerlink" title="2、使用 export{ a as b} 导出"></a>2、使用 export{ a as b} 导出</h3><p>相当于导出时重命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Vincent&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name <span class="keyword">as</span> firstName&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName &#125; <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br></pre></td></tr></table></figure><h3 id="3、export时定义变量或者函数"><a href="#3、export时定义变量或者函数" class="headerlink" title="3、export时定义变量或者函数"></a>3、export时定义变量或者函数</h3><p>类似于Java中的匿名函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> method == <span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method&quot;</span>)&#125;, name = <span class="string">&quot;vincent&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; method, name &#125; <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br></pre></td></tr></table></figure><h3 id="4、export-default"><a href="#4、export-default" class="headerlink" title="4、export default"></a>4、export default</h3><p>其实export default主要用于当一个js模块文件只有一个个功能的时候，直接用export default导出，导出时不需要为该模块命名,导入时自定义名称，非常方便。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&quot;Vincent&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br></pre></td></tr></table></figure><h3 id="5、使用-export-a-as-default-导出"><a href="#5、使用-export-a-as-default-导出" class="headerlink" title="5、使用 export{ a as default} 导出"></a>5、使用 export{ a as default} 导出</h3><p>导出时将某个功能设置为默认模块，导入时自定义名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a.js文件</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">method</span> = (<span class="params"></span>) =&gt; <span class="string">&quot;Vincent&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; method <span class="keyword">as</span> <span class="keyword">default</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main.js文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; defaultMethod &#125; <span class="keyword">from</span> <span class="string">&quot;/.a.js&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6、使用-export-a-from-导出"><a href="#6、使用-export-a-from-导出" class="headerlink" title="6、使用 export a from  导出"></a>6、使用 export a from  导出</h3><p>相当于导出其他模块功能，结合5使用，重命名他模块中的默认导出，再导出，多用于新建一个js，统一管理import&#x2F;export关系</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Navbar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Navbar&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">Sidebar</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./Sidebar/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">TagsView</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./TagsView&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> <span class="title class_">AppMain</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./AppMain&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/diligenceday/p/5503777.html">https://www.cnblogs.com/diligenceday/p/5503777.html</a><br><a href="https://www.cnblogs.com/xiaotanke/p/7448383.html">https://www.cnblogs.com/xiaotanke/p/7448383.html</a></p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> ES6 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和有些人生活在同一片天空下，感觉空气都变得浑浊</title>
      <link href="/posts/95c1395b.html"/>
      <url>/posts/95c1395b.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 武汉 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Nexus Maven私服</title>
      <link href="/posts/a6aa1f9d.html"/>
      <url>/posts/a6aa1f9d.html</url>
      
        <content type="html"><![CDATA[<center>_做web开发的对Maven肯定不会陌生..._</center><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>做web开发的对Maven肯定不会陌生，强大的Maven为项目构建、项目管理和第三方Jar包管理提供了支撑。在一个项目中Maven默认提供的中央仓库是在远程网络服务Appache提供的，搭建一个新项目的时候经常下jar包下的捉急，太慢了，其实在maven的settings.xml配置文件中配置第三方镜像就ok了。但是这么简单这么可以满(zhuang)足(bi)！于是利用闲暇之余，捣鼓了一下怎么搭建nexus私服。至于什么是nexus私服，我们可以先看看文章顶部那张图。</p><p>私服就是相当于在Maven本地仓库和中心服务器之间搭建了一个代理服务器，你可将第三方jar包下载至Nexus服务器，在为本地仓库提供服务。而且在我们项目中，经常有一些自己提供的jar包，我们可以上传到私服，再建立服务依赖关系，这样代码就不存在泄露问题，而且管理也非常方便。</p><p>Ps：开始我以为Nexus只能提供maven管理，搭建完后才发现Nexus功能相当强大，还能进行提供doker，npm，yum等一系列代理服务，厉害了我的哥。</p><!-- more --><h3 id="Nexus搭建流程"><a href="#Nexus搭建流程" class="headerlink" title="Nexus搭建流程"></a>Nexus搭建流程</h3><p><em>话不多说，是时候展示正真的技术。</em></p><h4 id="安装Nexus"><a href="#安装Nexus" class="headerlink" title="安装Nexus"></a>安装Nexus</h4><p>私服首先你肯定要有一个服务器，linux也好，windows也行。下文一linux为例演示<br>1、下载Nexus安装文件：<a href="http://www.sonatype.org/nexus/go">http://www.sonatype.org/nexus/go</a><br>2、Ftp上传至linux服务器指定目录<br>3、解压就可以运行，不需要安装<br>4、cd到bin目录，输入命令：*.&#x2F;nexus start*</p><img src="http://oyo2a85eo.bkt.clouddn.com//post/nexus/nexus_installation.png"><p>5、访问 <code>http://139.199.192.109:8081</code>或者<code>http://139.199.192.109:8081/nexus</code>,加不加nexus可能跟版本有关系，自己试试就行,ip为服务器地址，8081是Nexus默认端口，可以自己修改。</p><img src="http://oyo2a85eo.bkt.clouddn.com//post/nexus/nexus_login.png"><p>6、默认用户：admin，密码：admin123，建议登陆后先修改一下密码</p><h4 id="配置Maven"><a href="#配置Maven" class="headerlink" title="配置Maven"></a>配置Maven</h4><p>直接贴出我Maven的settings.xml，上面<mirrors>是一些镜像地址，避免国内下载jar包太慢，在下面<profiles>中配置了Nexus仓库，注意对应关系，仓库地址Url可以在上一步，Nexus可视化后台中查看仓库详情Cpoy。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroups</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">proxies</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>net-cn<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>ui<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>ibiblio<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>CN<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSChina Central<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.oschina.net/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local public nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://139.199.192.109:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus releases<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://139.199.192.109:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local private nexus snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://139.199.192.109:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus-public<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus-releases<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>nexus-snapshots<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改项目pom-xml"><a href="#修改项目pom-xml" class="headerlink" title="修改项目pom.xml"></a>修改项目pom.xml</h4><p>项目的pom文件中要加入下面这段代码。id需要和settings.xml中<servers>中的仓库id一致，但是不明白为什么又要再配置一次Url地址</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://139.199.192.109:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://139.199.192.109:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以在idea中使用了，下载的第三方jar包在Nexus中都会备份，就避免项目过大，每个人都要下载。使用deploy命令可以将当前项目打包上传到Nexus私服，很方便管理项目直接互相依赖。</p><img src="http://oyo2a85eo.bkt.clouddn.com//post/nexus/deploy.png"><p>在Nexus后台可以查看当前仓库中存在的jar包</p><img src="http://oyo2a85eo.bkt.clouddn.com//post/nexus/repository.png">]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis+Spring 插件分页</title>
      <link href="/posts/6cb3f533.html"/>
      <url>/posts/6cb3f533.html</url>
      
        <content type="html"><![CDATA[<center>_Mybatis分页插件详解..._</center><span id="more"></span><h3 id="总体流程"><a href="#总体流程" class="headerlink" title="总体流程"></a>总体流程</h3><p>最近研究了一下公司后台系统的分页实现机制，发现收获还是蛮多的，主要思想是使用Spring Aop 和Mybatis的插件拦截器，在特定sql执行之前进行拦截，然后判断数据库类型，加上相应分页语法，然后执行（以下以Mysql数据库作为示例）</p><h4 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title="Talk is cheap,Show me the code"></a><em>Talk is cheap,Show me the code</em></h4><h3 id="mybatis-config-xml"><a href="#mybatis-config-xml" class="headerlink" title="mybatis-config.xml"></a>mybatis-config.xml</h3><p>首先是Mybatis的配置文件，mybatis-config.xml,应该是网上找的，都有详细注解，看看就好，平时这个配置基本没有改动，主要是在底部配置了 <em>PaginationInterceptor</em> 插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全局参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使全局的映射器启用或禁用缓存。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全局启用或禁用延迟加载。当禁用时，所有关联对象都会即时加载。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当启用时，有延迟加载属性的对象在被调用时将会完全加载任意属性。否则，每种属性将会按需要加载。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否允许单条sql 返回多个数据集 (取决于驱动的兼容性) default:true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是否可以使用列的别名 (取决于驱动的兼容性) default:true --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许JDBC 生成主键。需要驱动器支持。如果设为了true，这个设置将强制使用被生成的主键，有一些驱动器不兼容不过仍然可以执行。 default:false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定 MyBatis 如何自动映射 数据基表的列 NONE：不隐射 PARTIAL:部分 FULL:全部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这是默认的执行类型 （SIMPLE: 简单； REUSE: 执行器可能重复使用prepared statements语句；BATCH:</span></span><br><span class="line"><span class="comment">执行器可以重复执行语句和批量更新） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用驼峰命名法转换字段。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置本地缓存范围 session:就会有数据的共享 statement:语句范围 (这样就不会有数据的共享 ) defalut:session --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置但JDBC类型为空时,某些驱动程序 要指定值,default:OTHER，插入空值时不需要指定类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;NULL&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插件配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.mg.background.common.persistence.interceptor.PaginationInterceptor&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分页拦截器"><a href="#分页拦截器" class="headerlink" title="分页拦截器"></a>分页拦截器</h3><p>分页拦截的功能主要由以下几个类实现<br>（1）AbstractInterceptor 拦截器基础类<br>（2）PaginationInterceptor 我们要使用的分页插件类，继承上面基础类<br>（3）SQLHelper 主要是用来提前执行count语句，还有就是获取整个完整的分页语句<br>（4）Dialect，MysqlDialect,主要用来数据库是否支持limit语句，然后封装完整limit语句</p><h4 id="AbstractInterceptor"><a href="#AbstractInterceptor" class="headerlink" title="AbstractInterceptor"></a>AbstractInterceptor</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractInterceptor</span> <span class="keyword">implements</span> <span class="title class_">Interceptor</span>, Serializable &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7601006451417393141L</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PAGE</span> <span class="operator">=</span> <span class="string">&quot;pages&quot;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELEGATE</span> <span class="operator">=</span> <span class="string">&quot;delegate&quot;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MAPPED_STATEMENT</span> <span class="operator">=</span> <span class="string">&quot;mappedStatement&quot;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">Log</span> <span class="variable">log</span> <span class="operator">=</span> LogFactory.getLog(<span class="built_in">this</span>.getClass());</span><br><span class="line"><span class="keyword">protected</span> Dialect DIALECT;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Pages&lt;Object&gt; <span class="title function_">convertParameter</span><span class="params">(Object parameterObject, Pages&lt;Object&gt; page)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (parameterObject <span class="keyword">instanceof</span> Pages) &#123;</span><br><span class="line"><span class="keyword">return</span> (Pages&lt;Object&gt;) parameterObject;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Pages&lt;Object&gt;) Reflections.getFieldValue(parameterObject, PAGE);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置属性，支持自定义方言类和制定数据库的方式</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;dialectClass&lt;/code&gt;,自定义方言类。可以不配置这项</span></span><br><span class="line"><span class="comment"> * &lt;ode&gt;dbms&lt;/ode&gt; 数据库类型，插件支持的数据库</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;sqlPattern&lt;/code&gt; 需要拦截的SQL ID</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> p 属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initProperties</span><span class="params">(Properties p)</span> &#123;</span><br><span class="line"><span class="type">Dialect</span> <span class="variable">dialect</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">dbType</span> <span class="operator">=</span> <span class="string">&quot;mysql&quot;</span>;<span class="comment">//这里</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;db2&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">DB2Dialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;derby&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">DerbyDialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;h2&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">H2Dialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;hsql&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">HSQLDialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;mysql&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">MySQLDialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;oracle&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">OracleDialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;postgre&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">PostgreSQLDialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;mssql&quot;</span>.equals(dbType) || <span class="string">&quot;sqlserver&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">SQLServer2005Dialect</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;sybase&quot;</span>.equals(dbType)) &#123;</span><br><span class="line">dialect = <span class="keyword">new</span> <span class="title class_">SybaseDialect</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dialect == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;mybatis dialect error.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">DIALECT = dialect;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是定义了 <em>convertParameter</em> 方法和使用 <em>initProperties</em> 配置方言类，类似一个简单工厂模式，方便切换数据库的时候，使用不同的分页语法。基本用不到，毕竟一个项目不可能随随便便更换数据库。</p><h4 id="PaginationInterceptor"><a href="#PaginationInterceptor" class="headerlink" title="PaginationInterceptor"></a>PaginationInterceptor</h4><p>先看代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123; @Signature(type = Executor.class, method = &quot;query&quot;, args = &#123; MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class &#125;) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaginationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">AbstractInterceptor</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4989671349466153547L</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">MappedStatement</span> <span class="variable">mappedStatement</span> <span class="operator">=</span> (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//        //拦截需要分页的SQL</span></span><br><span class="line"><span class="comment">//        if (mappedStatement.getId().matches(_SQL_PATTERN)) &#123;</span></span><br><span class="line"><span class="comment">//        if (StringUtils.indexOfIgnoreCase(mappedStatement.getId(), _SQL_PATTERN) != -1) &#123;</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">parameter</span> <span class="operator">=</span> invocation.getArgs()[<span class="number">1</span>];</span><br><span class="line"><span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> mappedStatement.getBoundSql(parameter);</span><br><span class="line"><span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line"><span class="comment">//获取分页参数对象</span></span><br><span class="line">Pages&lt;Object&gt; pages = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (parameterObject != <span class="literal">null</span>) &#123;</span><br><span class="line">pages = convertParameter(parameterObject, pages);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果设置了分页对象，则进行分页</span></span><br><span class="line"><span class="keyword">if</span> (pages != <span class="literal">null</span> &amp;&amp; pages.getPageSize() != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(boundSql.getSql())) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">originalSql</span> <span class="operator">=</span> boundSql.getSql().trim();</span><br><span class="line"><span class="comment">//得到总记录数</span></span><br><span class="line">pages.setTotal(SQLHelper.getCount(originalSql, <span class="literal">null</span>, mappedStatement, parameterObject, boundSql, log));</span><br><span class="line"><span class="comment">//分页查询 本地化对象 修改数据库注意修改实现</span></span><br><span class="line"><span class="type">String</span> <span class="variable">pageSql</span> <span class="operator">=</span> SQLHelper.generatePageSql(originalSql, pages, DIALECT);</span><br><span class="line"><span class="comment">//                if (log.isDebugEnabled()) &#123;</span></span><br><span class="line"><span class="comment">//                    log.debug(&quot;PAGE SQL:&quot; + StringUtils.replace(pageSql, &quot;\n&quot;, &quot;&quot;));</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">invocation.getArgs()[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">RowBounds</span>(RowBounds.NO_ROW_OFFSET, RowBounds.NO_ROW_LIMIT);</span><br><span class="line"><span class="type">BoundSql</span> <span class="variable">newBoundSql</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoundSql</span>(mappedStatement.getConfiguration(), pageSql, boundSql.getParameterMappings(), boundSql.getParameterObject());</span><br><span class="line"><span class="comment">//解决MyBatis 分页foreach 参数失效 start</span></span><br><span class="line"><span class="keyword">if</span> (Reflections.getFieldValue(boundSql, <span class="string">&quot;metaParameters&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">MetaObject</span> <span class="variable">mo</span> <span class="operator">=</span> (MetaObject) Reflections.getFieldValue(boundSql, <span class="string">&quot;metaParameters&quot;</span>);</span><br><span class="line">Reflections.setFieldValue(newBoundSql, <span class="string">&quot;metaParameters&quot;</span>, mo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决MyBatis 分页foreach 参数失效 end</span></span><br><span class="line"><span class="type">MappedStatement</span> <span class="variable">newMs</span> <span class="operator">=</span> copyFromMappedStatement(mappedStatement, <span class="keyword">new</span> <span class="title class_">BoundSqlSqlSource</span>(newBoundSql));</span><br><span class="line">invocation.getArgs()[<span class="number">0</span>] = newMs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="keyword">return</span> invocation.proceed();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">plugin</span><span class="params">(Object target)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Plugin.wrap(target, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>.initProperties(properties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MappedStatement <span class="title function_">copyFromMappedStatement</span><span class="params">(MappedStatement ms, SqlSource newSqlSource)</span> &#123;</span><br><span class="line">MappedStatement.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappedStatement</span>.Builder(ms.getConfiguration(), ms.getId(), newSqlSource, ms.getSqlCommandType());</span><br><span class="line">builder.resource(ms.getResource());</span><br><span class="line">builder.fetchSize(ms.getFetchSize());</span><br><span class="line">builder.statementType(ms.getStatementType());</span><br><span class="line">builder.keyGenerator(ms.getKeyGenerator());</span><br><span class="line"><span class="keyword">if</span> (ms.getKeyProperties() != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (String keyProperty : ms.getKeyProperties()) &#123;</span><br><span class="line">builder.keyProperty(keyProperty);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">builder.timeout(ms.getTimeout());</span><br><span class="line">builder.parameterMap(ms.getParameterMap());</span><br><span class="line">builder.resultMaps(ms.getResultMaps());</span><br><span class="line">builder.cache(ms.getCache());</span><br><span class="line"><span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BoundSqlSqlSource</span> <span class="keyword">implements</span> <span class="title class_">SqlSource</span> &#123;</span><br><span class="line">BoundSql boundSql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BoundSqlSqlSource</span><span class="params">(BoundSql boundSql)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.boundSql = boundSql;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BoundSql <span class="title function_">getBoundSql</span><span class="params">(Object parameterObject)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> boundSql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在顶部使用了 <em>@Intercepts</em> 注解定义了需要拦截的sql语句，</p><blockquote><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。默认情况下，MyBatis 允许使用插件来拦截的方法调用包括：<br>Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)<br>ParameterHandler (getParameterObject, setParameters)<br>ResultSetHandler (handleResultSets, handleOutputParameters)<br>StatementHandler (prepare, parameterize, batch, update, query)<br>总体概括为：<br>拦截执行器的方法<br>拦截参数的处理<br>拦截结果集的处理<br>拦截Sql语法构建的处理</p></blockquote><div align=center>![Mybatis四大接口](http://oyo2a85eo.bkt.clouddn.com//post/mybatis_page/Mybatis%E5%9B%9B%E5%A4%A7%E6%8E%A5%E5%8F%A3.jpeg)</div><blockquote><p>上图Mybatis框架的整个执行过程。Mybatis插件能够对则四大对象进行拦截，可以包含到了Mybatis一次会议的所有操作。可见Mybatis的的插件很强大。</p></blockquote><blockquote><p>Executor是 Mybatis的内部执行器，它负责调用StatementHandler操作数据库，并把结果集通过 ResultSetHandler进行自动映射，另外，他还处理了二级缓存的操作。从这里可以看出，我们也是可以通过插件来实现自定义的二级缓存的。<br>StatementHandler是Mybatis直接和数据库执行sql脚本的对象。另外它也实现了Mybatis的一级缓存。这里，我们可以使用插件来实现对一级缓存的操作(禁用等等)。<br>ParameterHandler是Mybatis实现Sql入参设置的对象。插件可以改变我们Sql的参数默认设置。<br>ResultSetHandler是Mybatis把ResultSet集合映射成POJO的接口对象。我们可以定义插件对Mybatis的结果集自动映射进行修改。</p></blockquote><div align=center>![Mybatis四大接口](http://oyo2a85eo.bkt.clouddn.com//post/mybatis_batchInsert/sql.png)</div><p>运行的时候通过反射获取执行的方法以及参数，通过 <em>AbstractInterceptor</em> 中的 <em>convertParameter(Object parameterObject, Pages<Object> page)</em> 方法获取请求实体中的page对象（待会讲为什么实体中包含page对象），如果请求实体中包含page对象，即继续进行分页处理。</p><h4 id="SQLHelper"><a href="#SQLHelper" class="headerlink" title="SQLHelper"></a>SQLHelper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SQL工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> poplar.yfyang / thinkgem</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2013-8-28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLHelper</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对SQL参数(?)设值,参考org.apache.ibatis.executor.parameter.DefaultParameterHandler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ps              表示预编译的 SQL 语句的对象。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mappedStatement MappedStatement</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> boundSql        SQL</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameterObject 参数对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> java.sql.SQLException 数据库异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setParameters</span><span class="params">(PreparedStatement ps, MappedStatement mappedStatement, BoundSql boundSql, Object parameterObject)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">ErrorContext.instance().activity(<span class="string">&quot;setting parameters&quot;</span>).object(mappedStatement.getParameterMap().getId());</span><br><span class="line">List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line"><span class="keyword">if</span> (parameterMappings != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> mappedStatement.getConfiguration();</span><br><span class="line"><span class="type">TypeHandlerRegistry</span> <span class="variable">typeHandlerRegistry</span> <span class="operator">=</span> configuration.getTypeHandlerRegistry();</span><br><span class="line"><span class="type">MetaObject</span> <span class="variable">metaObject</span> <span class="operator">=</span> parameterObject == <span class="literal">null</span> ? <span class="literal">null</span> : configuration.newMetaObject(parameterObject);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class="line"><span class="type">ParameterMapping</span> <span class="variable">parameterMapping</span> <span class="operator">=</span> parameterMappings.get(i);</span><br><span class="line"><span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">Object value;</span><br><span class="line"><span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> parameterMapping.getProperty();</span><br><span class="line"><span class="type">PropertyTokenizer</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyTokenizer</span>(propertyName);</span><br><span class="line"><span class="keyword">if</span> (parameterObject == <span class="literal">null</span>) &#123;</span><br><span class="line">value = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">value = parameterObject;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</span><br><span class="line">value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(ForEachSqlNode.ITEM_PREFIX) &amp;&amp; boundSql.hasAdditionalParameter(prop.getName())) &#123;</span><br><span class="line">value = boundSql.getAdditionalParameter(prop.getName());</span><br><span class="line"><span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">value = metaObject == <span class="literal">null</span> ? <span class="literal">null</span> : metaObject.getValue(propertyName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class="line"><span class="type">TypeHandler</span> <span class="variable">typeHandler</span> <span class="operator">=</span> parameterMapping.getTypeHandler();</span><br><span class="line"><span class="keyword">if</span> (typeHandler == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;There was no TypeHandler found for parameter &quot;</span> + propertyName + <span class="string">&quot; of statement &quot;</span> + mappedStatement.getId());</span><br><span class="line">&#125;</span><br><span class="line">typeHandler.setParameter(ps, i + <span class="number">1</span>, value, parameterMapping.getJdbcType());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询总纪录数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql             SQL语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection      数据库连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mappedStatement mapped</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parameterObject 参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> boundSql        boundSql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 总记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException sql查询错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> Connection connection, <span class="keyword">final</span> MappedStatement mappedStatement, <span class="keyword">final</span> Object parameterObject, <span class="keyword">final</span> BoundSql boundSql, Log log)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">dbName</span> <span class="operator">=</span> <span class="string">&quot;mysql&quot;</span>; <span class="comment">//这里需要配置，目前只用mysql 暂时写死</span></span><br><span class="line"><span class="keyword">final</span> String countSql;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;oracle&quot;</span>.equals(dbName)) &#123;</span><br><span class="line">countSql = <span class="string">&quot;select count(1) from (&quot;</span> + sql + <span class="string">&quot;) tmp_count&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//countSql = &quot;select count(1) from (&quot; + change(sql) + &quot;) tmp_count&quot;;</span></span><br><span class="line">countSql = <span class="string">&quot;select count(1) &quot;</span> + removeSelect(removeOrders(sql));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> connection;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">log.debug(<span class="string">&quot;COUNT SQL: &quot;</span> + StringUtils.replaceEach(countSql, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;\t&quot;</span> &#125;, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; <span class="string">&quot; &quot;</span>, <span class="string">&quot; &quot;</span> &#125;));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (conn == <span class="literal">null</span>) &#123;</span><br><span class="line">conn = mappedStatement.getConfiguration().getEnvironment().getDataSource().getConnection();</span><br><span class="line">&#125;</span><br><span class="line">ps = conn.prepareStatement(countSql);</span><br><span class="line"><span class="type">BoundSql</span> <span class="variable">countBS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoundSql</span>(mappedStatement.getConfiguration(), countSql, boundSql.getParameterMappings(), parameterObject);</span><br><span class="line"><span class="comment">//解决MyBatis 分页foreach 参数失效 start</span></span><br><span class="line"><span class="keyword">if</span> (Reflections.getFieldValue(boundSql, <span class="string">&quot;metaParameters&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">MetaObject</span> <span class="variable">mo</span> <span class="operator">=</span> (MetaObject) Reflections.getFieldValue(boundSql, <span class="string">&quot;metaParameters&quot;</span>);</span><br><span class="line">Reflections.setFieldValue(countBS, <span class="string">&quot;metaParameters&quot;</span>, mo);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//解决MyBatis 分页foreach 参数失效 end</span></span><br><span class="line">SQLHelper.setParameters(ps, mappedStatement, countBS, parameterObject);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">count = rs.getInt(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ps != <span class="literal">null</span>) &#123;</span><br><span class="line">ps.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据数据库方言，生成特定的分页sql</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql     Mapper中的Sql语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page    分页对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dialect 方言类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 分页SQL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generatePageSql</span><span class="params">(String sql, Pages&lt;Object&gt; page, Dialect dialect)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (dialect.supportsLimit()) &#123;</span><br><span class="line"><span class="keyword">return</span> dialect.getLimitString(sql, page.getFirstResult(), page.getMaxResults());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> sql;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去除qlString的select子句。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">removeSelect</span><span class="params">(String qlString)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">beginPos</span> <span class="operator">=</span> qlString.toLowerCase().indexOf(<span class="string">&quot;from&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> qlString.substring(beginPos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去除hql的orderBy子句。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">removeOrders</span><span class="params">(String qlString)</span> &#123;</span><br><span class="line"><span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;order\\s*by[\\w|\\W|\\s|\\S]*&quot;</span>, Pattern.CASE_INSENSITIVE);</span><br><span class="line"><span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(qlString);</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">m.appendReplacement(sb, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">m.appendTail(sb);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>SQLHelper</em> 是一个对执行sql进行预处理的第三方工具类， <em>PaginationInterceptor.java</em> 中调用的主要是 <em>SQLHelper</em> 中的 *getCount()*和 <em>generatePageSql()</em> 方法，获取查询总条数和根据 <em>dialect</em> 类的不同，来拼接不同的数据库的 <em>limit</em> 语句。</p><h4 id="Dialect方言类"><a href="#Dialect方言类" class="headerlink" title="Dialect方言类"></a>Dialect方言类</h4><p><em>PaginationInterceptor</em> 通过父类 <em>AbstractInterceptor</em> 中工厂方法获取到预先设定的 <em>MySQLDialect</em>,针对Mysql数据库，实现分页查询语句的拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mysql方言的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLDialect</span> <span class="keyword">implements</span> <span class="title class_">Dialect</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLimitString</span><span class="params">(String sql, <span class="type">int</span> offset, <span class="type">int</span> limit)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getLimitString(sql, offset, Integer.toString(offset), Integer.toString(limit));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsLimit</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将sql变成分页sql语句,提供将offset及limit使用占位符号(placeholder)替换.</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * 如mysql</span></span><br><span class="line"><span class="comment"> * dialect.getLimitString(&quot;select * from user&quot;, 12, &quot;:offset&quot;,0,&quot;:limit&quot;) 将返回</span></span><br><span class="line"><span class="comment"> * select * from user limit :offset,:limit</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql               实际SQL语句</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset            分页开始纪录条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offsetPlaceholder 分页开始纪录条数－占位符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limitPlaceholder  分页纪录条数占位符号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 包含占位符的分页sql</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLimitString</span><span class="params">(String sql, <span class="type">int</span> offset, String offsetPlaceholder, String limitPlaceholder)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(sql);</span><br><span class="line">stringBuilder.append(<span class="string">&quot; limit &quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (offset &gt; <span class="number">0</span>) &#123;</span><br><span class="line">stringBuilder.append(offsetPlaceholder).append(<span class="string">&quot;,&quot;</span>).append(limitPlaceholder);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">stringBuilder.append(limitPlaceholder);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：实体中为什么包含Page对象，因为所有实体继承一个叫 <em>BaseEntity</em> 的父类，其中包含一些通用方法和属性，比如id，createTime，createBy等，还包含page对象，这样请求的时候就可以把page对象封装在请求体中，非常方便。</p><h4 id="page"><a href="#page" class="headerlink" title="page"></a>page</h4><p>最后贴上page类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pages</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageNo</span> <span class="operator">=</span> <span class="number">1</span>; <span class="comment">// 当前页码</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 页面大小，设置为“-1”表示不进行分页（分页无效）</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> total;<span class="comment">// 总记录数，设置为“-1”表示不查询总数</span></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; rows = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Pages</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pageSize = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNo   当前页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Pages</span><span class="params">(<span class="type">int</span> pageNo, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(pageNo, pageSize, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Pages</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(request, response, -<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Pages</span><span class="params">(HttpServletRequest request, HttpServletResponse response, <span class="type">int</span> defaultPageSize)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">page</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;page&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setPageNo(Integer.parseInt(page));</span><br><span class="line"><span class="type">String</span> <span class="variable">size</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;rows&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.setPageSize(Integer.parseInt(size));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNo   当前页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count    数据条数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Pages</span><span class="params">(<span class="type">int</span> pageNo, <span class="type">int</span> pageSize, <span class="type">long</span> count)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(pageNo, pageSize, count, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNo   当前页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count    数据条数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list     本页数据对象列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Pages</span><span class="params">(<span class="type">int</span> pageNo, <span class="type">int</span> pageSize, <span class="type">long</span> count, List&lt;T&gt; list)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.setTotal(count);</span><br><span class="line"><span class="built_in">this</span>.setPageNo(pageNo);</span><br><span class="line"><span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line"><span class="built_in">this</span>.rows = list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取设置总数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置数据总数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(<span class="type">long</span> count)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.total = count;</span><br><span class="line"><span class="keyword">if</span> (pageSize &gt;= count) &#123;</span><br><span class="line">pageNo = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前页码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageNo</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pageNo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置当前页码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageNo</span><span class="params">(<span class="type">int</span> pageNo)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pageNo = pageNo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取页面大小</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> pageSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置页面大小（最大500）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.pageSize = pageSize &lt;= <span class="number">0</span> ? <span class="number">10</span> : pageSize;<span class="comment">// &gt; 500 ? 500 : pageSize;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取本页数据对象列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRows</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置本页数据对象列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Pages&lt;T&gt; <span class="title function_">setRows</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.rows = list;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页是否有效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> this.pageSize==-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isDisabled</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.pageSize == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否进行总数统计</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> this.count==-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNotCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.total == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 Hibernate FirstResult</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirstResult</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">firstResult</span> <span class="operator">=</span> (getPageNo() - <span class="number">1</span>) * getPageSize();</span><br><span class="line"><span class="keyword">if</span> (firstResult &gt;= getTotal()) &#123;</span><br><span class="line">firstResult = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> firstResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 Hibernate MaxResults</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxResults</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> getPageSize();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a><em>参考文章</em></h4><p>CDNS：<a href="http://blog.csdn.net/u014001866/article/details/52806930">mybatis常用分页插件，快速分页处理</a><br>简书：<a href="https://www.jianshu.com/p/7c7b8c2c985d">Mybatis插件原理 作者：曹金桂</a></p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Mybatis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis批量插入</title>
      <link href="/posts/cb74ceb6.html"/>
      <url>/posts/cb74ceb6.html</url>
      
        <content type="html"><![CDATA[<center>_插插插..._</center><span id="more"></span><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><p>在for循环中插入数据，当循环次数比较大时，效率很低。使用批量插入效率就会高很多。<br><br>什么是 <strong>批量插入</strong>：在每次循环中插入是插入一条数据，我们可以把要插入的数据用一个集合保存起来，比如List（建议用Linklist，LinkList增删效率比ArrayList高），等到遍历完毕，再做插入操作，当数据量非常庞大时，可以分批插入。</p><h3 id="插入的三种方式"><a href="#插入的三种方式" class="headerlink" title="插入的三种方式"></a>插入的三种方式</h3><h4 id="普通insert"><a href="#普通insert" class="headerlink" title="普通insert"></a>普通insert</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;CoffeeDateMessage&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into m_coffee_date_message(</span><br><span class="line">        coffee_date_id,</span><br><span class="line">        publisher,</span><br><span class="line">        user_id,</span><br><span class="line">        scope,</span><br><span class="line">        phone,</span><br><span class="line">        open_id,</span><br><span class="line">        send_count,</span><br><span class="line">        break_time,</span><br><span class="line">        status</span><br><span class="line">        )values(</span><br><span class="line">        #&#123;coffeeDateId&#125;,</span><br><span class="line">        #&#123;publisher&#125;,</span><br><span class="line">        #&#123;userId&#125;,</span><br><span class="line">        #&#123;scope&#125;,</span><br><span class="line">        #&#123;phone&#125;,</span><br><span class="line">        #&#123;openId&#125;,</span><br><span class="line">        #&#123;sendCount&#125;,</span><br><span class="line">        #&#123;breakTime&#125;,</span><br><span class="line">        #&#123;status&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用jdbc批量插入"><a href="#使用jdbc批量插入" class="headerlink" title="使用jdbc批量插入"></a>使用jdbc批量插入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Connection conn;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://192.168.0.200:3306/xxx&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into test_user (u_name,create_date) value (?,SYSDATE())&quot;</span>;</span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">prest</span> <span class="operator">=</span> conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE,</span><br><span class="line">            ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        prest.setString(<span class="number">1</span>, <span class="string">&quot;a&quot;</span> + i);</span><br><span class="line">        prest.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line">    prest.executeBatch();</span><br><span class="line">    conn.commit();</span><br><span class="line">    conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mybatis批量插入"><a href="#mybatis批量插入" class="headerlink" title="mybatis批量插入"></a>mybatis批量插入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsertList&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.util.List&quot;</span>&gt;</span></span><br><span class="line">        insert into m_coffee_date_message</span><br><span class="line">        (</span><br><span class="line">        coffee_date_id,</span><br><span class="line">        publisher,</span><br><span class="line">        user_id,</span><br><span class="line">        scope,</span><br><span class="line">        phone,</span><br><span class="line">        open_id,</span><br><span class="line">        send_count,</span><br><span class="line">        break_time,</span><br><span class="line">        status</span><br><span class="line">        )</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (</span><br><span class="line">            #&#123;item.coffeeDateId&#125;,</span><br><span class="line">            #&#123;item.publisher&#125;,</span><br><span class="line">            #&#123;item.userId&#125;,</span><br><span class="line">            #&#123;item.scope&#125;,</span><br><span class="line">            #&#123;item.phone&#125;,</span><br><span class="line">            #&#123;item.openId&#125;,</span><br><span class="line">            #&#123;item.sendCount&#125;,</span><br><span class="line">            #&#123;item.breakTime&#125;,</span><br><span class="line">            #&#123;item.status&#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三种方式效率"><a href="#三种方式效率" class="headerlink" title="三种方式效率"></a>三种方式效率</h3><p>效率没有自己测试，拿别人的测试结果，<a href="http://blog.csdn.net/chenpy/article/details/53912752">原地址</a>，THKS，侵删。</br></p><p>数据量分别是10，100，300，1000，5000条数据</br><br>数量级别：10 批量插入耗时：141 非批量插入耗时：93 jdbc批量插入耗时：195</br><br>数量级别：100 批量插入耗时：164 非批量插入耗时：970 jdbc批量插入耗时：718</br><br>数量级别：300 批量插入耗时：355 非批量插入耗时：3030 jdbc批量插入耗时：1997</br><br>数量级别：500 批量插入耗时：258 非批量插入耗时：5355 jdbc批量插入耗时：2974</br><br>数量级别：1000 批量插入耗时：422 非批量插入耗时：8787 jdbc批量插入耗时：6440</br><br>数量级别：5000 批量插入耗时：870 非批量插入耗时：43498 jdbc批量插入耗时：30368</p><img id="YangBlog2" src="http://oyo2a85eo.bkt.clouddn.com//post/mybatis_batchInsert/mybatis_batchInsert.png">]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis insert 返回主键</title>
      <link href="/posts/842ee889.html"/>
      <url>/posts/842ee889.html</url>
      
        <content type="html"><![CDATA[<center>_还是插插插..._</center><span id="more"></span><h3 id="mybatis做insert操作的时候返回插入的那条数据的id"><a href="#mybatis做insert操作的时候返回插入的那条数据的id" class="headerlink" title="mybatis做insert操作的时候返回插入的那条数据的id"></a>mybatis做insert操作的时候返回插入的那条数据的id</h3><h4 id="对于支持具有自增长方式的数据库（如mysql）"><a href="#对于支持具有自增长方式的数据库（如mysql）" class="headerlink" title="对于支持具有自增长方式的数据库（如mysql）"></a>对于支持具有自增长方式的数据库（如mysql）<br></h4><p>设置 <strong>useGeneratedKeys&#x3D;”true”</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Place&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into m_place(</span><br><span class="line">        name,</span><br><span class="line">        address,</span><br><span class="line">        create_time,</span><br><span class="line">        update_time</span><br><span class="line">        )values(</span><br><span class="line">        #&#123;name&#125;,</span><br><span class="line">        #&#123;address&#125;,</span><br><span class="line">        #&#123;createTime&#125;,</span><br><span class="line">        #&#123;updateTime&#125;</span><br><span class="line">        )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，返回值不是主键，返回的是被操作的记录条数。要获取主键：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">placeDAO.insert(newPlace);</span><br><span class="line">System.out.println(<span class="string">&quot;主键：&quot;</span> + newPlace.getId());</span><br><span class="line">dateRecord.setAgreePlace(newPlace.getId().intValue());</span><br></pre></td></tr></table></figure><p>insert操作之后，传入的newPlace的实体会自动获取主键。</p><h4 id="对于不支持具有自增长方式的数据库（如Oracle）"><a href="#对于不支持具有自增长方式的数据库（如Oracle）" class="headerlink" title="对于不支持具有自增长方式的数据库（如Oracle）"></a>对于不支持具有自增长方式的数据库（如Oracle）<br></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;yyy&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">            select my_seq.nextval from dual</span><br><span class="line">         <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>New Blog</title>
      <link href="/posts/163e5fe8.html"/>
      <url>/posts/163e5fe8.html</url>
      
        <content type="html"><![CDATA[<center>_不折腾不罢休..._</center><span id="more"></span><h2 id="关于Blog的血泪史"><a href="#关于Blog的血泪史" class="headerlink" title="关于Blog的血泪史"></a>关于Blog的血泪史</h2><h3 id="YangBlog1-0"><a href="#YangBlog1-0" class="headerlink" title="YangBlog1.0"></a>YangBlog1.0</h3><p>简直是不折腾不罢休，从最开始用 <strong>黄玄</strong> 的模板搭建了一个静态的Github Blog，简称YangBlog1.0。样式简洁大方。也是从那时加入了全球最大同性交友网站—— <em>Github</em>。</p><p>Blog的图找不到了，引用下大佬的界面吧。</p><img id="YangBlog1" src="http://oyo2a85eo.bkt.clouddn.com//post/newblog/yangblog_1.png"><h3 id="YangBlog2-0"><a href="#YangBlog2-0" class="headerlink" title="YangBlog2.0"></a>YangBlog2.0</h3><p>后来又觉得功能有些单一，正好公司有一台闲置的服务器，4核8G，当时两眼发光，想都不想就上了wordpress的贼船，</p><p>简称YangBlog2.0，发现wordpress不经过繁琐的优化，体验并不太好，毕竟PHP是最好的语言，<br><br><img src="http://oyo2a85eo.bkt.clouddn.com//post/newblog/huaji.jpg" height="200" width="200"></p><p>但是在4核8G的服务器加持下，感觉还不明显，</p><img id="YangBlog2" src="http://oyo2a85eo.bkt.clouddn.com//post/newblog/yangblog_2.png"><h3 id="YangBlog3-0"><a href="#YangBlog3-0" class="headerlink" title="YangBlog3.0"></a>YangBlog3.0</h3><p>知道有一天我自己搭梯子整了一台VPS，Vultr的乞丐版，2.5美刀一个月，单核500M，某日心血来潮，用自己的服务器来搭自己的Blog，</p><p>在linux上装了vpv，装上了LNMP，装上了wordpress，还装了个宝塔可视化的Linux后台管理，还寻思着要不要整个免费的SSL，然后…..然后就没有然后了，Blog迁移过来，平均两次访问一次Nginx 404。YangBlog3.0完全失败。</p><p>看见这个404了么？连错误界面都没有写，多么粗狂，这是阿爸对你深沉的爱!<img id="nginx404" src="http://oyo2a85eo.bkt.clouddn.com//post/newblog/nginx_404.png"></p><h3 id="YangBlog4-0"><a href="#YangBlog4-0" class="headerlink" title="YangBlog4.0"></a>YangBlog4.0</h3><p>4.0就是你看到的当前这个版本，基于Hexo+Next主题搭建，参考<a href="https://reuixiy.github.io/">reuixiy</a>,在此感谢所有为软件开源而不断奉献的人。</p><p>YangBlog4.0如下：</p><img id="YangBlog4" src="https://s2.ax1x.com/2019/02/21/kRgUbt.png"><p>颜色确实很斑驳，背景给了最爱的Vincent，最后一份画作 <em>《麦田群鸦》</em> ，亮黄色的麦田和蓝黑色的天空，两种颜色在远处，衔接，交织，碰撞，映射精神和现实两者间的冲击，不可调和的矛盾，通过粗狂的笔触，我们可以想象到Vincent在他生命最后的一段时光，是怎样一笔笔把颜料抠到画布上。那是一个怎样扭曲的灵魂。<br></p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 深圳 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极光推送-ios/Android平台 Notification构建</title>
      <link href="/posts/e7bce99d.html"/>
      <url>/posts/e7bce99d.html</url>
      
        <content type="html"><![CDATA[<center>_想来生活无非是痛苦和美丽..._</center><span id="more"></span><h2 id="极光推送"><a href="#极光推送" class="headerlink" title="极光推送"></a>极光推送</h2><p>最近App开发采用React Native + java前后端分离的方式，前端调用后台接口，后台返回数据。在某些应用情景，后台需要推送消息给用户客户端，基于敏捷开发，我们选择了集成极光推送的模式来推送给用户各种消息。</p><h3 id="极光推送的两种方式"><a href="#极光推送的两种方式" class="headerlink" title="极光推送的两种方式"></a>极光推送的两种方式</h3><ol><li>使用极光推送官方提供的推送请求API</li></ol><p>  第一种方式即，我们在后台按照极光文档讲推送内容封装成Json体，再去访问官方的API接口，提交Json请求体，实现推送功能。<br>  然而这种方式操作过于繁琐，格式也不好定义，因为要自己去将请求体转按照官方文档规则换成Json，代码量相对于第二种方式来说也比较多，官方也并不推荐这一种方式。</p><ol start="2"><li>使用官方提供的第三方SDK</li></ol><p>  第二种方式需要通过在pom.xml文件中添加下面代码，添加Maven依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.jpush.api<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jpush-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  添加Maven依赖后就可以在项目中直接调用极光官方封装好的方法来封装我们的消息体，非常简单直接。</p><h3 id="极光推送Demo"><a href="#极光推送Demo" class="headerlink" title="极光推送Demo"></a>极光推送Demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mg.open.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.JPushClient;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.PushResult;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.Message;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.Platform;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.PushPayload;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.audience.Audience;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.notification.AndroidNotification;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.notification.IosNotification;</span><br><span class="line"><span class="keyword">import</span> cn.jpush.api.push.model.notification.Notification;</span><br><span class="line"><span class="keyword">import</span> com.mg.web.common.utils.Push;</span><br><span class="line"><span class="keyword">import</span> com.mg.web.friend.dao.IPushMessageDAO;</span><br><span class="line"><span class="keyword">import</span> com.mg.web.friend.entity.PushMessage;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Created by Yang on 2017/11/4 0004.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JPush</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> Logger.getLogger(JPush.class);</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String MASTER_SECRET;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String APP_KEY;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> IPushMessageDAO pushMessageDAO;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//静态工具类注入service</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> JPush jPush;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      jPush = <span class="built_in">this</span>;</span><br><span class="line">      jPush.pushMessageDAO = <span class="built_in">this</span>.pushMessageDAO;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value(&quot;#&#123;config_muguang[&#x27;app_key&#x27;]&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppKey</span><span class="params">(String db)</span> &#123;</span><br><span class="line">      JPush.APP_KEY = db;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Value(&quot;#&#123;config_muguang[&#x27;master_secret&#x27;]&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMasterSecret</span><span class="params">(String db)</span> &#123;</span><br><span class="line">      JPush.MASTER_SECRET = db;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushAll</span><span class="params">(PushMessage pushMessage, Push push)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">JPushClient</span> <span class="variable">jPushClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPushClient</span>(MASTER_SECRET, APP_KEY);</span><br><span class="line">      <span class="type">PushPayload</span> <span class="variable">payload</span> <span class="operator">=</span> PushPayload.newBuilder()</span><br><span class="line">              .setPlatform(Platform.android_ios())</span><br><span class="line">              .setAudience(Audience.all())</span><br><span class="line">              .setNotification(Notification.newBuilder()</span><br><span class="line">                      .addPlatformNotification(AndroidNotification.newBuilder()</span><br><span class="line">                              .addExtras(push.getMap())</span><br><span class="line">                              .setAlert(pushMessage.getAlert())</span><br><span class="line">                              .setTitle(pushMessage.getTitle())</span><br><span class="line">                              .build())</span><br><span class="line">                      .addPlatformNotification(IosNotification.newBuilder()</span><br><span class="line">                              .addExtras(push.getMap())</span><br><span class="line">                              .setAlert(pushMessage.getAlert())</span><br><span class="line">                              .build())</span><br><span class="line">                      .build())</span><br><span class="line">              .build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取推送结果</span></span><br><span class="line">      <span class="type">PushResult</span> <span class="variable">result</span> <span class="operator">=</span> jPushClient.sendPush(payload);</span><br><span class="line">      <span class="comment">//保存推送消息</span></span><br><span class="line">      pushMessage.setPushCode(push.getCode());</span><br><span class="line">      pushMessage.setMsgId(result.msg_id);</span><br><span class="line">      pushMessage.setSendno(result.sendno);</span><br><span class="line">      jPush.pushMessageDAO.insert(pushMessage);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pushByAlias</span><span class="params">(String token, PushMessage pushMessage, Push push)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">JPushClient</span> <span class="variable">jPushClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JPushClient</span>(MASTER_SECRET, APP_KEY);</span><br><span class="line">      <span class="type">PushPayload</span> <span class="variable">payload</span> <span class="operator">=</span> PushPayload.newBuilder()</span><br><span class="line">              .setPlatform(Platform.android_ios())</span><br><span class="line">              .setAudience(Audience.alias(token))</span><br><span class="line">              .setNotification(Notification.newBuilder()</span><br><span class="line">                      .addPlatformNotification(AndroidNotification.newBuilder()</span><br><span class="line">                              .addExtras(push.getMap())</span><br><span class="line">                              .setAlert(pushMessage.getAlert())</span><br><span class="line">                              .setTitle(pushMessage.getTitle())</span><br><span class="line">                              .build())</span><br><span class="line">                      .addPlatformNotification(IosNotification.newBuilder()</span><br><span class="line">                              .addExtras(push.getMap())</span><br><span class="line">                              .setAlert(pushMessage.getAlert())</span><br><span class="line">                              .build())</span><br><span class="line">                      .build())</span><br><span class="line">              .build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取推送结果</span></span><br><span class="line">      <span class="type">PushResult</span> <span class="variable">result</span> <span class="operator">=</span> jPushClient.sendPush(payload);</span><br><span class="line">      <span class="comment">//保存推送消息</span></span><br><span class="line">      pushMessage.setPushCode(push.getCode());</span><br><span class="line">      pushMessage.setMsgId(result.msg_id);</span><br><span class="line">      pushMessage.setSendno(result.sendno);</span><br><span class="line">      jPush.pushMessageDAO.insert(pushMessage);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一开始没有仔细去看源码，分平台推送构建了两个PushPayload，分别推送ios和Android，后来在网上查阅资料发现可以通过 <strong>.newBuilder.addPlatformNotification()</strong> 的方法构造对应不同平台的Notification。</p><p>还有就是要注意一下springMVC怎么注入 <strong>static</strong> 变量和dao，其他的就没有什么好说的了。</p><h3 id="Build模式"><a href="#Build模式" class="headerlink" title="Build模式"></a>Build模式</h3><p>没有接触过Build模式的话看见上面那种一长串的 <strong>.set</strong> ，最后 <strong>.build()</strong> 的写法可能会觉得奇怪，这种写法第一次见识是在<br>《Effective Java》中，通过静态内部类Builder和隐式构造函数避免了当变量较多是使用重载构造器的繁琐，而且当这些参数中包含必选和可选的时候，重载构造器可能就要排列组合了，想想就觉得滑稽，手动滑稽。使用get&#x2F;set又可能会是Bean在构造过程中处于几个状态，而且get&#x2F;set那么low的写法怎么会有Builde模式的代码看起来简洁优雅。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NutritionFact3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//均是final，不可变</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servingSize;<span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servings;<span class="comment">// required</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> calories;<span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> fat;<span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> sodium;<span class="comment">// optional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> carbohydrate;<span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 必须参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servingSize;<span class="comment">// required</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> servings;<span class="comment">// required</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">calories</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">fat</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sodium</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// optional</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">carbohydrate</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">// optional</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须参数必须通过通过构造参数传递</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">(<span class="type">int</span> servingSize, <span class="type">int</span> servings)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.servingSize = servingSize;</span><br><span class="line">            <span class="built_in">this</span>.servings = servings;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建calories,返回本身，以便可以把调用连接起来</span></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">calories</span><span class="params">(<span class="type">int</span> calories)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.calories = calories;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建sodium</span></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">sodium</span><span class="params">(<span class="type">int</span> sodium)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.sodium = sodium;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建fat</span></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">fat</span><span class="params">(<span class="type">int</span> fat)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.fat = fat;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建carbohydrate</span></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">carbohydrate</span><span class="params">(<span class="type">int</span> carbohydrate)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.carbohydrate = carbohydrate;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//build,返回NutritionFact3</span></span><br><span class="line">        <span class="keyword">public</span> NutritionFact3 <span class="title function_">build</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NutritionFact3</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">NutritionFact3</span><span class="params">(Builder builder)</span></span><br><span class="line">    &#123;</span><br><span class="line">        servingSize = builder.servingSize;</span><br><span class="line">        servings = builder.servings;</span><br><span class="line">        calories = builder.calories;</span><br><span class="line">        fat = builder.fat;</span><br><span class="line">        sodium = builder.sodium;</span><br><span class="line">        carbohydrate = builder.carbohydrate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(Stringargs)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">NutritionFact3</span> <span class="variable">cocaCola</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NutritionFact3</span>.Builder(<span class="number">240</span>, <span class="number">8</span>).calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://tanfujun.com/2017/03/21/Effective-Java-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-2-%E9%81%87%E5%88%B0%E5%A4%9A%E4%B8%AA%E6%9E%84%E9%80%A0%E5%99%A8%E5%8F%82%E6%95%B0%E8%80%83%E8%99%91%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BA%E5%99%A8/">以上代码引用自晓晨DEV的技术博客，THKS</a></p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC @Value</title>
      <link href="/posts/26f2b4a3.html"/>
      <url>/posts/26f2b4a3.html</url>
      
        <content type="html"><![CDATA[<center>_老是忘记这个..._</center><span id="more"></span><h2 id="Value注入静态变量"><a href="#Value注入静态变量" class="headerlink" title="@Value注入静态变量"></a>@Value注入静态变量</h2><p>昨天写代码时用@value注入一个值，调试的时候发现值为空，应该是没有注入成功，注入方式使用@value和往常一样，仔细和往常代码比对发现这次注入的变量多了static修饰符。遂想到springMVC @ value注入<strong>静态变量</strong>和<strong>普通变量</strong>的方式是不是有所不同，查了一下发现注入方式确实存在区别，所以随手记下来。</p><h3 id="Value注入普通变量"><a href="#Value注入普通变量" class="headerlink" title="@Value注入普通变量"></a>@Value注入普通变量</h3><p>直接使用@value注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="meta">@Value(&quot;#&#123;config_muguang[&#x27;app_key&#x27;]&#125;&quot;)</span> String MASTER_SECRET;</span><br><span class="line"><span class="keyword">private</span> <span class="meta">@Value(&quot;#&#123;config_muguang[&#x27;master_secret&#x27;]&#125;&quot;)</span> String APP_KEY;</span><br></pre></td></tr></table></figure><h4 id="Value注入静态变量-1"><a href="#Value注入静态变量-1" class="headerlink" title="@Value注入静态变量"></a>@Value注入静态变量</h4><p>注入<strong>静态变量</strong>的时候要给set方法注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String MASTER_SECRET;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String APP_KEY;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;config_muguang[&#x27;app_key&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAppKey</span><span class="params">(String db)</span> &#123;</span><br><span class="line">    JPush.APP_KEY = db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;config_muguang[&#x27;master_secret&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMasterSecret</span><span class="params">(String db)</span> &#123;</span><br><span class="line">    JPush.MASTER_SECRET = db;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value注入静态变量方法总结"><a href="#Value注入静态变量方法总结" class="headerlink" title="@Value注入静态变量方法总结"></a>@Value注入静态变量方法总结</h4><p>给set方法注入是最常用的，还有没有其他方法给<strong>静态变量</strong>注入值呢？</p><blockquote><p>1、xml通过bean注入<br>2、给参数注入，执行set方法<br>3、通过中间变量赋值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String zhifuUrl;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;zhifu.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String zhifuUrlTmp;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    zhifuUrl = zhifuUrlTmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PS"><a href="#PS" class="headerlink" title="PS:"></a>PS:</h4><p>使用@Value标签给变量注入值的时候class上一定要加上@Component</p><h2 id="Value-和"><a href="#Value-和" class="headerlink" title="@Value #和$"></a>@Value #和$</h2><p>先直接来看看使用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;historyConf&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Value(&quot;#&#123;config_weixin[&#x27;api_key&#x27;]&#125;&quot;)</span></span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;config_weixin&quot;</span> class=<span class="string">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">&quot;locations&quot;</span>&gt;</span><br><span class="line">    &lt;list&gt;</span><br><span class="line">        &lt;value&gt;classpath:weixin.properties&lt;/value&gt;</span><br><span class="line">    &lt;/list&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">&quot;config_weixin&quot;</span> <span class="attr">location</span>=<span class="string">&quot;classpath:weixin.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>两种方式等价，都是通过在Spring配置文件中构建一个bean指向properties配置文件，使用时<br><strong>@Value(“#{config_weixin[‘api_key’]}”)</strong> config_weixin为bean的id，api_key为properties配置文件中key的值。方式二比一简单些，但是使用util标签，要引入util的xsd；</p><h3 id="-1"><a href="#-1" class="headerlink" title="$"></a>$</h3><p>在#使用方法的基础上加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;propertyConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;config_weixin&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于将config_weixin中所有key扩展到了全局变量中，使用时 <strong>@Value(“${historyConf}”)</strong> historyConf就是配置文件中的key值，不需要再加上配置文件名称。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><em>1、{}里面的内容必须符合SpEL表达式<br>2、#{…} 用于执行SpEl表达式，并将内容赋值给属性<br>3、${…} 主要用于加载外部属性文件中的值<br>4、#{…} 和${…} 可以混合使用，但是必须#{}外面，${}在里面，因为因为spring执行${}是时机要早于#{}。</em></p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Content-Type和@RequestBody</title>
      <link href="/posts/4ae11c2d.html"/>
      <url>/posts/4ae11c2d.html</url>
      
        <content type="html"><![CDATA[<center>_一点点失去..._</center><span id="more"></span><p>最近公司开发app平台，前后端分离，我这边主要使用springMVC写一些接口供前端调用，然后改写一下以前微信平台的servise方法，前端调接口的的时候出现了一个问题，请求400，后台拿不到值，看了下代码和文档，发现是前端请求头改成了 <strong>application&#x2F;json</strong></p><h4 id="一-从form的enctype属性到Content-Type"><a href="#一-从form的enctype属性到Content-Type" class="headerlink" title="一.从form的enctype属性到Content-Type"></a>一.从form的enctype属性到Content-Type</h4><p>表单的enctype有三种常见的属性：</p><blockquote><p>1、application&#x2F;x-www-form-urlencoded</p></blockquote><p>写html的时候我们都知道form有个属性enctype，如果不修改的话，缺省值是application&#x2F;x-www-form-urlencoded，这个值表示会将表单数据用&amp;符号做一个简单的拼接。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /post_test.php HTTP/1.1</span><br><span class="line">Accept-Language: zh-CN</span><br><span class="line">User-Agent: Mozilla/4.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Host: 192.168.12.102</span><br><span class="line">Content-Length: 42</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">title=test&amp;content=%B3%AC%BC%B6%C5%AE%C9%FA&amp;submit=post+article</span><br></pre></td></tr></table></figure><p>这种情况，后台在controller对应的方法中的参数直接添加对应的bean，springMVC可以根据参数的名字自动完成装配</p><p>当请求头中Content-Type为application&#x2F;json时，后台controller中添加注解@RequestBody，将请求数据注入到一个String字符串中，把字符串转换成Json对象，在解析这个Json对象根据约定的API文档中的参数名获取传输数据。<br>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toMyInfoStep6.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Message <span class="title function_">toMyInfoStep6</span><span class="params">(<span class="meta">@RequestBody</span> String paramsJson)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="type">JSONObject</span> <span class="variable">JO</span> <span class="operator">=</span> JSON.parseObject(paramsJson);</span><br><span class="line">     <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> (String) JO.get(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">     <span class="type">UserInfo</span> <span class="variable">myInfo</span> <span class="operator">=</span> userInfoService.getUserByToken(token);</span><br><span class="line">     <span class="keyword">if</span> (myInfo.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">         msg = <span class="keyword">new</span> <span class="title class_">Message</span>(MessageType.M11209);</span><br><span class="line">         <span class="keyword">return</span> msg;</span><br><span class="line">     &#125;</span><br><span class="line">     msg = <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">     Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">     map.put(<span class="string">&quot;myInfo&quot;</span>, myInfo);</span><br><span class="line">     map.put(<span class="string">&quot;confirm&quot;</span>, userInfoService.getUserCertInfoById(myInfo.getId()));</span><br><span class="line">     msg.setMap(map);</span><br><span class="line"> &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">     logger.error(<span class="string">&quot;APP UserInfoController toMyInfoStep6 method error&quot;</span>, e);</span><br><span class="line">     msg = <span class="keyword">new</span> <span class="title class_">Message</span>(MessageType.M10001);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、multipart&#x2F;form-data</p></blockquote><p>表单数据被编码为一条消息，页上的每个&lt;input&gt;对应消息中的一个部分，用boundary&#x3D;—————————36243265420146”分割各个部分（boundary值由浏览器生成）。它不会对字符进行编码，一般用于传输二进制文件（图片、视频、、、）。</p><blockquote><p>3、text&#x2F;plain</p></blockquote><p>表单数据中的空格转换为 “+”加号，但不对特殊字符编码。（get方式会这样，post时不会）</p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA启动tomcat报错 Unable to ping server at localhost:1099</title>
      <link href="/posts/8ca96c76.html"/>
      <url>/posts/8ca96c76.html</url>
      
        <content type="html"><![CDATA[<center>_Tom猫..._</center><span id="more"></span> <h3>正文</h3><p> 在IDAE下启动tomcat时报错：</p><p> Application Server was not connected before run configuration stop, reason: Unable to ping server at localhost:1099</p> <img src="http://oyo2a85eo.bkt.clouddn.com//post/tomcat-error/tomcat_error.png" class="alignnone size-medium wp-image-81" /> <hr /> <h3>解决方法</h3><p> 上网查了查，发现大家给了这么几个解决方法</p> <h4>1. jmx服务</h4><p> IDEA启用了jmx服务，而要启用tomcat的jmx服务比较麻烦，所以我们可以修改host文件来关闭jmx服务</p> <blockquote>   在/etc/hosts 中添加 127.0.0.1 localhost [计算机名]     #   127.0.0.1       localhost  DESKTOP-TVV7CS3 </blockquote><p> 计算机名可以通过cmd中输入hostname来查询</p><p> 但我配置之后还是继续报错，所以不是这种原因</p> <h4>2.java环境配置错误</h4><p> 你的电脑里有多个jre，在IDEA里给Tomcat选jre时候必须要选你配置了环境变量的那个</p> <h4>3.tomcat配置文件冲突</h4><p> tomcat bin文件夹中catalina.bat 文件中设置了jvm参数 set JAVA_OPTS&#x3D; -Xmx1024M -Xms512M -XX:MaxPermSize&#x3D;256m。把参数去掉就Ok了</p> <img src="http://oyo2a85eo.bkt.clouddn.com//post/tomcat-error/host.png" class="alignnone size-medium wp-image-83" /><p> 问题解决</p>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Bean生命周期</title>
      <link href="/posts/9f2c44e1.html"/>
      <url>/posts/9f2c44e1.html</url>
      
        <content type="html"><![CDATA[<center>_"Spring作为当前Java最流行、最强大的轻量级框架，受到了程序员的热烈欢迎..._</center><span id="more"></span><p><a href="http://www.cnblogs.com/zrtqsk/p/3735273.html">转自http://www.cnblogs.com/zrtqsk/p/3735273.html，THKS</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring作为当前Java最流行、最强大的轻量级框架，受到了程序员的热烈欢迎。准确的了解Spring Bean的生命周期是非常必要的。我们通常使用ApplicationContext作为Spring容器。这里，我们讲的也是 ApplicationContext中Bean的生命周期。而实际上BeanFactory也是差不多的，只不过处理器需要手动注册。</p><hr><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="一、生命周期流程图"><a href="#一、生命周期流程图" class="headerlink" title="一、生命周期流程图"></a>一、生命周期流程图</h4><p>Spring Bean的完整生命周期从创建Spring容器开始，直到最终Spring容器销毁Bean，这其中包含了一系列关键点。</p><p>若容器注册了以上各种接口，程序那么将会按照以上的流程进行。下面将仔细讲解各接口作用。</p><img src="http://oyo2a85eo.bkt.clouddn.com//post/spring-bean-life/bean-life-1.png"/><h4 id="二、各类接口方法分类"><a href="#二、各类接口方法分类" class="headerlink" title="二、各类接口方法分类"></a>二、各类接口方法分类</h4><p>Bean的完整生命周期经历了各种方法调用，这些方法可以划分为以下几类：</p><p><em>1、Bean自身的方法：这个包括了Bean本身调用的方法和通过配置文件中<bean>的init-method和destroy-method指定的方法</em></p><p><em>2、Bean级生命周期接口方法：这个包括了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这些接口的方法</em></p><p><em>3、容器级生命周期接口方法：这个包括了InstantiationAwareBeanPostProcessor 和 BeanPostProcessor 这两个接口实现，一般称它们的实现类为“后处理器”。</em></p><p><em>4、工厂后处理器接口方法：这个包括了AspectJWeavingEnabler, ConfigurationClassPostProcessor, CustomAutowireConfigurer等等非常有用的工厂后处理器　　接口的方法。工厂后处理器也是容器级的。在应用上下文装配配置文件之后立即调用。</em></p><h4 id="三、演示"><a href="#三、演示" class="headerlink" title="三、演示"></a>三、演示</h4><p>我们用一个简单的Spring Bean来演示一下Spring Bean的生命周期。</p><h5 id="1、简单的Spring-Bean"><a href="#1、简单的Spring-Bean" class="headerlink" title="1、简单的Spring Bean"></a>1、简单的Spring Bean</h5><p>调用Bean自身的方法和Bean级生命周期接口方法，为了方便演示，它实现了BeanNameAware、BeanFactoryAware、InitializingBean和DiposableBean这4个接口，同时有2个方法，对应配置文件中<bean>的init-method和destroy-method。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> springBeanTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactoryAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qsk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryAware</span>, BeanNameAware,</span><br><span class="line">        InitializingBean, DisposableBean &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> phone;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">    <span class="keyword">private</span> String beanName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【构造器】调用Person的构造器实例化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【注入属性】注入属性name&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【注入属性】注入属性address&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(<span class="type">int</span> phone)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【注入属性】注入属性phone&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person [address=&quot;</span> + address + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, phone=&quot;</span></span><br><span class="line">                + phone + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是BeanFactoryAware接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanFactory</span><span class="params">(BeanFactory arg0)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = arg0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是BeanNameAware接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBeanName</span><span class="params">(String arg0)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【BeanNameAware接口】调用BeanNameAware.setBeanName()&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.beanName = arg0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是InitializingBean接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;【InitializingBean接口】调用InitializingBean.afterPropertiesSet()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是DiposibleBean接口方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【DiposibleBean接口】调用DiposibleBean.destory()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过&lt;bean&gt;的init-method属性指定的初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【init-method】调用&lt;bean&gt;的init-method属性指定的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过&lt;bean&gt;的destroy-method属性指定的初始化方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myDestory</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【destroy-method】调用&lt;bean&gt;的destroy-method属性指定的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、BeanPostProcessor接口的方法"><a href="#2、BeanPostProcessor接口的方法" class="headerlink" title="2、BeanPostProcessor接口的方法"></a>2、BeanPostProcessor接口的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> springBeanTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;这是BeanPostProcessor实现类构造器！！&quot;</span>);</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object arg0, String arg1)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">        .println(<span class="string">&quot;BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arg0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object arg0, String arg1)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">        .println(<span class="string">&quot;BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arg0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，BeanPostProcessor接口包括2个方法postProcessAfterInitialization和postProcessBeforeInitialization，这两个方法的第一个参数都是要处理的Bean对象，第二个参数都是Bean的name。返回值也都是要处理的Bean对象。这里要注意。</p><h5 id="3、InstantiationAwareBeanPostProcessor接口的方法"><a href="#3、InstantiationAwareBeanPostProcessor接口的方法" class="headerlink" title="3、InstantiationAwareBeanPostProcessor接口的方法"></a>3、InstantiationAwareBeanPostProcessor接口的方法</h5><p>InstantiationAwareBeanPostProcessor接口本质是BeanPostProcessor的子接口，一般我们继承Spring为其提供的适配器类InstantiationAwareBeanPostProcessor Adapter来使用它，如下：<br>复制代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> springBeanTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.PropertyValues;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInstantiationAwareBeanPostProcessor</span> <span class="keyword">extends</span></span><br><span class="line">        <span class="title class_">InstantiationAwareBeanPostProcessorAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInstantiationAwareBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口方法、实例化Bean之前调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInstantiation</span><span class="params">(Class beanClass,</span></span><br><span class="line"><span class="params">            String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口方法、实例化Bean之后调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接口方法、设置某个属性时调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PropertyValues <span class="title function_">postProcessPropertyValues</span><span class="params">(PropertyValues pvs,</span></span><br><span class="line"><span class="params">            PropertyDescriptor[] pds, Object bean, String beanName)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个有3个方法，其中第二个方法postProcessAfterInitialization就是重写了BeanPostProcessor的方法。第三个方法postProcessPropertyValues用来操作属性，返回值也应该是PropertyValues对象。</p><h5 id="4、工厂后处理器接口方法"><a href="#4、工厂后处理器接口方法" class="headerlink" title="4、工厂后处理器接口方法"></a>4、工厂后处理器接口方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> springBeanTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanFactoryPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.ConfigurableListableBeanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanFactoryPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyBeanFactoryPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;这是BeanFactoryPostProcessor实现类构造器！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory arg0)</span></span><br><span class="line">            <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out</span><br><span class="line">                .println(<span class="string">&quot;BeanFactoryPostProcessor调用postProcessBeanFactory方法&quot;</span>);</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> arg0.getBeanDefinition(<span class="string">&quot;person&quot;</span>);</span><br><span class="line">        bd.getPropertyValues().addPropertyValue(<span class="string">&quot;phone&quot;</span>, <span class="string">&quot;110&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、配置beans-xml文件"><a href="#5、配置beans-xml文件" class="headerlink" title="5、配置beans.xml文件"></a>5、配置beans.xml文件</h5><p>很简单，使用ApplicationContext,处理器不用手动注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">            http://www.springframework.org/schema/beans/spring-beans-3.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springBeanTest.MyBeanPostProcessor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;instantiationAwareBeanPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springBeanTest.MyInstantiationAwareBeanPostProcessor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanFactoryPostProcessor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springBeanTest.MyBeanFactoryPostProcessor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;springBeanTest.Person&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;myInit&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">destroy-method</span>=<span class="string">&quot;myDestory&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:address</span>=<span class="string">&quot;广州&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">p:phone</span>=<span class="string">&quot;15900000000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> springBeanTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanLifeCycle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;现在开始初始化容器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;springBeanTest/beans.xml&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;容器初始化成功&quot;</span>);</span><br><span class="line">        <span class="comment">//得到Preson，并使用</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> factory.getBean(<span class="string">&quot;person&quot;</span>,Person.class);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;现在开始关闭容器！&quot;</span>);</span><br><span class="line">        ((ClassPathXmlApplicationContext)factory).registerShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关闭容器使用的是实际是AbstractApplicationContext的钩子方法。</p><h5 id="7、结果"><a href="#7、结果" class="headerlink" title="7、结果"></a>7、结果</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">现在开始初始化容器</span><br><span class="line"><span class="number">2014</span>-<span class="number">5</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">46</span>:<span class="number">20</span> org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@19a0c7c: startup date [Sun May <span class="number">18</span> <span class="number">15</span>:<span class="number">46</span>:<span class="number">20</span> CST <span class="number">2014</span>]; root of context hierarchy</span><br><span class="line"><span class="number">2014</span>-<span class="number">5</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">46</span>:<span class="number">20</span> org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from <span class="keyword">class</span> <span class="title class_">path</span> resource [springBeanTest/beans.xml]</span><br><span class="line">这是BeanFactoryPostProcessor实现类构造器！！</span><br><span class="line">BeanFactoryPostProcessor调用postProcessBeanFactory方法</span><br><span class="line">这是BeanPostProcessor实现类构造器！！</span><br><span class="line">这是InstantiationAwareBeanPostProcessorAdapter实现类构造器！！</span><br><span class="line"><span class="number">2014</span>-<span class="number">5</span>-<span class="number">18</span> <span class="number">15</span>:<span class="number">46</span>:<span class="number">20</span> org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons</span><br><span class="line">信息: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@9934d4: defining beans [beanPostProcessor,instantiationAwareBeanPostProcessor,beanFactoryPostProcessor,person]; root of factory hierarchy</span><br><span class="line">InstantiationAwareBeanPostProcessor调用postProcessBeforeInstantiation方法</span><br><span class="line">【构造器】调用Person的构造器实例化</span><br><span class="line">InstantiationAwareBeanPostProcessor调用postProcessPropertyValues方法</span><br><span class="line">【注入属性】注入属性address</span><br><span class="line">【注入属性】注入属性name</span><br><span class="line">【注入属性】注入属性phone</span><br><span class="line">【BeanNameAware接口】调用BeanNameAware.setBeanName()</span><br><span class="line">【BeanFactoryAware接口】调用BeanFactoryAware.setBeanFactory()</span><br><span class="line">BeanPostProcessor接口方法postProcessBeforeInitialization对属性进行更改！</span><br><span class="line">【InitializingBean接口】调用InitializingBean.afterPropertiesSet()</span><br><span class="line">【init-method】调用&lt;bean&gt;的init-method属性指定的初始化方法</span><br><span class="line">BeanPostProcessor接口方法postProcessAfterInitialization对属性进行更改！</span><br><span class="line">InstantiationAwareBeanPostProcessor调用postProcessAfterInitialization方法</span><br><span class="line">容器初始化成功</span><br><span class="line">Person [address=广州, name=张三, phone=<span class="number">110</span>]</span><br><span class="line">现在开始关闭容器！</span><br><span class="line">【DiposibleBean接口】调用DiposibleBean.destory()</span><br><span class="line">【destroy-method】调用&lt;bean&gt;的destroy-method属性指定的初始化方法</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP初探——通知</title>
      <link href="/posts/435f454d.html"/>
      <url>/posts/435f454d.html</url>
      
        <content type="html"><![CDATA[<center>_"Aspect-Oriented Programming（面向切面编程），它其实是 OOP（Object-Oriented Programing，面向对象编程）思想的补充和完善"..._</center><span id="more"></span><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>说道Spring，就离不开AOP，都知道AOP是面向切面编程，但什么是切面，又如何面向切面编程，面向切面编程和面向对象编程有什么区别，Spring中众多的概念名称容易让人头晕目眩（切身体会）</p><p>我们先来看看软件工程Coding的几个阶段，从最开始的汇编语言，可以说是面向机器编程，到C，用一个个函数来控制流程，可以说是面向过程编程，到Java，有了对象的抽象，<strong>类</strong>，用一个个抽象的类来实现各种功能，代码易维护，易复用，降低了系统的耦合度，是大家所熟知的面向对面编程，即OOP。我们知道，面向对象的特点是继承、多态和封装。而封装就要求将功能分散到不同的对象中去。实际上也就是说，让不同的类设计不同的方法。这样代码就分散到一个个的类中去了。这样做的好处是降低了代码的复杂程度，使类可重用。<br>但是人们也发现，在分散代码的同时，也增加了代码的重复性。什么意思呢？比如说，我们在两个类中，可能都需要在每个方法中做日志。按面向对象的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但就是因为面向对象的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。也许有人会说，那好办啊，我们可以将这段代码写在一个独立的类独立的方法里，然后再在这两个类中调用。但是，这样一来，这两个类跟我们上面提到的独立的类就有耦合了，它的改变会影响这两个类。那么，有没有什么办法，能让我们在需要的时候，随意地加入代码呢？于是AOP出现了，在运行时，动态地将代码切入到类的指定方法、指定位置上，那些类需要实现的交叉的功能就是所谓的<strong>切面</strong>。而通知，即为切面的具体实现。<br>本文为Spring初探，首先来介绍一下Spring中的五种通知，用实例来揭开AOP的朦胧的面纱。</p><hr><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>前文谈到通知，即为AOP切面的具体实现，比如有几个类要实现共同功能，如日志，或者资源关闭，连接关闭等功能，这就是一个切面，而如何实现这些功能的，依赖的就是通知。</p><p>Spring中有五种通知：</p><blockquote><p>前置通知（Before Advice）：在切入点选择的连接点处的方法之前执行的通知，该通知不影响正常程序执行流程（除非该通知抛出异常，该异常将中断当前方法链的执行而返回）。</p></blockquote><blockquote><p>后置通知（After Advice）：在切入点选择的连接点处的方法之后执行的通知（无论方法执行是否成功都会被调用）。</p></blockquote><blockquote><p>环绕通知（Around Advices）：环绕着在切入点选择的连接点处的方法所执行的通知，环绕通知可以在方法调用之前和之后自定义任何行为，并且可以决定是否执行连接点处的方法、替换返回值、抛出异常等等。</p></blockquote><blockquote><p>异常通知（After throwing Advice）: 在切入点选择的连接点处的方法抛出异常返回时执行的通知，必须是连接点处的方法抛出任何异常返回时才调用异常通知。</p></blockquote><blockquote><p>引用通知（After returning Advice）：在切入点选择的连接点处的方法正常执行完毕时执行的通知，必须是连接点处的方法没抛出任何异常正常返回时才调用。</p></blockquote><p>下文主要以介绍前置通知来介绍AOP思想。</p><h4 id="一、前置通知"><a href="#一、前置通知" class="headerlink" title="一、前置通知"></a>一、前置通知</h4><p>前置通知需实现MethodBeforeAdvice接口(org.springframework.aop.MethodBeforeAdvice)，该接口中只有一个before()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class MyMethodeBeforeAdvice implements MethodBeforeAdvice&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * method:被调用的方法</span><br><span class="line">     * args:给method传递的参数</span><br><span class="line">     * target：目标对象</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void before(Method method, Object[] args, Object target)</span><br><span class="line">            throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;记录日志...&quot;+method.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口定义：<br>接口TestServiceInter1和TestServiceInter2中分别定义了sayHai()和sayBey()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface TestServiceInter1 &#123;</span><br><span class="line">    public void sayHai();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface TestServiceInter2 &#123;</span><br><span class="line">    public void sayBey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestService类实现了TestServiceInter1和TestServiceInter2接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class TestService implements TestServiceInter1,TestServiceInter2&#123;</span><br><span class="line">    private String name;</span><br><span class="line">    @Override</span><br><span class="line">    public void sayHai() &#123;</span><br><span class="line">        System.out.println(&quot;Hello! &quot;+name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void sayBey() &#123;</span><br><span class="line">        System.out.println(&quot;Bey! &quot;+name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring配置文件beans.xml中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans</span><br><span class="line">    xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置被代理的对象 --&gt;</span><br><span class="line">&lt;bean id=&quot;testService&quot; class=&quot;com.itheima.aop.TestService&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;name&quot; value=&quot;Yang&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 配置前置通知 --&gt;</span><br><span class="line">&lt;bean id=&quot;MyMethodeBeforeAdvice&quot; class=&quot;com.itheima.aop.MyMethodeBeforeAdvice&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 配置代理对象 --&gt;</span><br><span class="line">&lt;bean id=&quot;proxyFactoryBean&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- 代理接口集 --&gt;</span><br><span class="line">    &lt;property name=&quot;proxyInterfaces&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;com.itheima.aop.TestServiceInter1&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;com.itheima.aop.TestServiceInter2&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!-- 把通知织入代理对象 --&gt;</span><br><span class="line">    &lt;property name=&quot;interceptorNames&quot;&gt;</span><br><span class="line">        &lt;!-- 相当于把MyMethodeBeforeAdvice前置通知和代理对象关联，可以把通知看成拦截器 --&gt;</span><br><span class="line">        &lt;value&gt;MyMethodeBeforeAdvice&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!-- 配置被代理对象 --&gt;</span><br><span class="line">    &lt;property name=&quot;target&quot; ref=&quot;testService&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>在main函数中实例化一个TestServiceInter1或TestServiceInter2对象，可以分别调用sayHai()或sayBey()方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;com/itheima/aop/beans.xml&quot;);</span><br><span class="line">        TestServiceInter1 ts = (TestServiceInter1) ac.getBean(&quot;proxyFactoryBean&quot;);</span><br><span class="line">        ts.sayHai();</span><br><span class="line">        //TestServiceInter2 ts = (TestServiceInter2) ac.getBean(&quot;proxyFactoryBean&quot;);</span><br><span class="line">        //ts.sayBey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们来看一下结果：<br>实例化TestServiceInter1时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">记录日志...sayHai</span><br><span class="line">Hello! Yang</span><br></pre></td></tr></table></figure><p>实例化TestServiceInter2时：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log4j:WARN No appenders could be found for logger (org.springframework.context.support.ClassPathXmlApplicationContext).</span><br><span class="line">log4j:WARN Please initialize the log4j system properly.</span><br><span class="line">记录日志...sayBey</span><br><span class="line">Bey! Yang</span><br></pre></td></tr></table></figure><p>我们还可以看到，配置一个通知需要<br>1.定义接口</br><br>2.编写对象（被代理对象&#x3D;目标对象）</br><br>3.编写通知（前置通知在目标方法调用前调用）</br><br>4.1 在bean.xml文件中配置</br><br>4.2 配置被代理对象</br></br><br>4.3 配种通知</br><br>4.4.1 配置代理对象（ProxyFactoryBean的对象实例）</br><br>4.4.2 配置代理接口集</br><br>4.4.3 织入通知</br><br>4.4.4 为代理对象配置被代理通知</br></p><p>我们可以看到无论TestServiceInter1还是TestServiceInter2，都依赖于前置通知MyMethodeBeforeAdvice中的before()方法实现了记录日志的功能，但具体实现又有所不同。</p><p>TestServiceInter1和TestServiceInter2的交叉功能：记录日志就是一个切面，而该切面的具体实现交由通知来实现（在此示例中为前置通知），通过在beans.xml文件中实现了即插即用，既实现了代码的复用，又没有增加类与类之间的耦合关系。</p><p>被代理对象TestService即为目标对象，其中sayHaier()或sayBey()就是目标对象的目标方法，所有通知都是围绕着这个方法，所有目标方法也叫做AOP的切入点亦或是连接点。关于切入点和连接点我还没搞太清楚，网上大概说：</p><blockquote><p>连接点是个虚的概念，可简单理解为切入点的集合；他只是对应用程序的所有需要进行插入切面的一个统称；<br>每个切入点都对应具体的连接点，在运行期spring就是根据这些切入点的定义，将通知或者拦截器插入到具体的连接点上。</p></blockquote><p>个人理解为AOP中切入点一定是一个连接点，而一个连接点为切入提供了可能，可以通过配置通知变成切入点。</p><h4 id="二、后置通知"><a href="#二、后置通知" class="headerlink" title="二、后置通知"></a>二、后置通知</h4><p>后置通知与前置通知基本类似，后置通知需要实现AfterReturningAdvice接口(org.springframework.aop.AfterReturningAdvice)中的afterReturning()方法。配置后在目标方法执行之后执行，常用来处数据库连接或资源关闭功能。<br>当需要在代理对象中织入多个通知的时候可以使用<list></list>来配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;proxyFactoryBean&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- 代理接口集 --&gt;</span><br><span class="line">    &lt;property name=&quot;proxyInterfaces&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;com.itheima.aop.TestServiceInter&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;com.itheima.aop.TestServiceInter2&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!-- 把通知织入代理对象 --&gt;</span><br><span class="line">    &lt;property name=&quot;interceptorNames&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;!-- 相当于把MyMethodeBeforeAdvice前置通知和代理对象关联，可以把通知看成拦截器 --&gt;</span><br><span class="line">            &lt;value&gt;MyMethodeBeforeAdvice&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;MyAfterReturningAdvice&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;!-- 配置被代理对象 --&gt;</span><br><span class="line">    &lt;property name=&quot;target&quot; ref=&quot;test1Service&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><h4 id="三、环绕通知"><a href="#三、环绕通知" class="headerlink" title="三、环绕通知"></a>三、环绕通知</h4><p>环绕通知需实现MethodInterceptor接口(org.aopalliance.intercept.MethodInterceptor)中invoke()方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class MyMethodInterceptor implements MethodInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(MethodInvocation arg0) throws Throwable &#123;</span><br><span class="line">        System.out.println(&quot;环绕通知被调用：调用方法前执行  &quot;);</span><br><span class="line">        Object obj = arg0.proceed();</span><br><span class="line">        System.out.println(&quot;环绕通知被调用：调用方法后执行  &quot;);</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法中传入参数arg0代表目标方法。通过Object obj &#x3D; arg0.proceed();我们可以控制哪些动作在目标方法前执行，哪些动作在目标方法后执行。</p><h4 id="四、异常通知"><a href="#四、异常通知" class="headerlink" title="四、异常通知"></a>四、异常通知</h4><p>异常通知需实现ThrowsAdvice接口(org.springframework.aop.ThrowsAdvice)中的afterThrowing()方法，配置同前置通知，异常通知在目标方法抛出异常时执行。</p><h4 id="五、引用通知"><a href="#五、引用通知" class="headerlink" title="五、引用通知"></a>五、引用通知</h4><p>最后一个是引入通知，引入通知不需要编写相应的类，只需要进行配置，目的是用来指定哪些方法需要执行相应的通知，如，我们想指定只有sayHai()方法执行前置通知，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义前置通知的切入点（引用通知） --&gt;</span><br><span class="line">&lt;bean id=&quot;myMethodBeforeAdviceFilter&quot; class=&quot;org.springframework.aop.support.NameMatchMethodPointcutAdvisor&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;advice&quot; ref=&quot;myMethodBeforeAdvice&quot;&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name=&quot;mappedNames&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;sayHai&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> document </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深圳 </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A NEW BEGINNING</title>
      <link href="/posts/c52773ac.html"/>
      <url>/posts/c52773ac.html</url>
      
        <content type="html"><![CDATA[<center>_想来想去都是忏悔和委屈..._</center><span id="more"></span><h3>新的开始</h3><p><em>2017.7.31离职，2017.8.8新公司报道，老大说他以前入职腾讯正好是8月8号。</em></p><p>老早就把WordPress搭建好了，但是一直没有时间折腾。有时间了就把个人博客从Github上迁移过来了。</p><p>新的博客，新的开始！</p><h3>深圳</h3><p>&amp;ensp;&amp;ensp;2月份来到深圳，十几个小时的卧铺，睡了一夜就过去了。</p><p>&amp;ensp;&amp;ensp;早上八点从床上爬起来，迷迷糊糊的，被不知道什么皮的火车慢慢拖进深圳站，只是觉得深圳的阳光好亮啊，对，我说的不是太阳好亮，是阳光好亮，你懂我的意思么，就是那么亮，把什么都照的亮的一片，那时的我并不能预料到今后几个月的处境，脑子里只有一个想法，“深圳，我来了。”</p><p>&amp;ensp;&amp;ensp;关于工作上的事情不想再多说，作为一个成年人人应该为自己的选择负责。我一直相信的是mark you choose，and just do it，那时还没搞明白“其实我们每个人并不具有评判自己价值的权利”的我就跟猴群里面一直迷失了自己定位的猴子一样。我总觉得你还不知道你想要什么的时候，就慢慢走呗，总会有一天你会知道你想要什么，那时再跑也不迟。可是从学校出来后我才发现，就算你不知道你想要什么，也要拔腿就跑，因为不跑就只能被吃掉，主观上我总不愿意那些被说烂的道理，不是因为不相信它，是因为太相信自己。</p><p>&amp;ensp;&amp;ensp;还记得在罗湖的时候，经常梦见自己坐火车回武汉，但TM的怎么都赶不上那班列车，醒来都跟个SB一样。在到后来回武汉座了十几个小时的硬座，主要是想感受下十几个硬座是什么感觉，其次是没钱。在火车上昏昏沉沉的，心里还是放不下那只猫啊，你TM怎么就能那么狠心，你跟谁赌气啊，心酸的不行。</p><h3>武汉</h3><p>&amp;ensp;&amp;ensp;觉得回武汉了一切问题就能解决，就像觉得找一份武汉的工作，我们就还能在一起，不合适的终究不合适，留不住的终究留不住。找了新的工作，找了房子，由于一些原因，工作没去，房子也没租。你TM为什么就不能不这么小心眼？我TM为什么也不能成熟一点。那样结局会不会就不会那么糟糕？六月底四年的酒席散场，各奔天涯，有人哭了。有人笑了。自己却没有多大感触，像只废狗一样窝在同学租的房子里，白天一个人出去晚上一个人回来，有时就想找个人问问这么操蛋的生活是为了什么，可是这个问题至今为止都还没有人回答过我。在十二楼热得不行，视频里还在讲着Spring IOC实现机制，脑子里回荡的却一直是李逼那粗糙的声音“你看荒谬的世界，你看荒谬的我们”。</p><p>&amp;ensp;&amp;ensp;后来把东西一件件打包分类，寄到深圳，就像在围墙里先把包裹扔到围墙外一样，大概就那么一个下午吧，决定了，于是就去做了，于是七月我又回到了深圳，带了本《1Q84》上的高铁，直至下车一页也没有翻过。</p><p>&amp;ensp;&amp;ensp;在武汉的时候觉得武汉这里不好哪里不好，四年时间也没有去过武汉多少地方，走的时候反倒有些留恋，还想去大桥吹江风啊，还想去一次东湖，回来的路上淋着雨在南湖大道上飞奔，还想去武理后面那条街吃烧烤上通宵，还想去百瑞景看电影，不管和谁去都行，还有好多好多想做的事情，可是这辈子都好像不会再有机会了，就像这辈子都应该不会再有机会跟你共撑一把伞了，物是人非，大抵说的就是如此。</p><p>&amp;ensp;&amp;ensp;去过阴天的大梅沙，近处的海是混浊的，远处的海是冷的，浪摇晃着把海草拍在岸上，沙滩上的我觉得这个世界都在摇晃。因为是阴天，海边的人不多，云也很低，灰色的，就像曼彻斯特的海，好吧，我承认那时还没看过《Manchester by the Sea》。我不知道是不是每个人心中都有一个Lee,放逐在充斥着阴冷的海面、颠簸的船、雪和无法消散的雾气的曼彻斯特，“I can&#96;t beat it”。</p><p>&amp;ensp;&amp;ensp;想起不知在哪里看到的一个故事，说李逼早年在livehouse开演唱会的时候，黄牛倒票卖不出去，折价都没人买，最后只好自己进去听，“这唱的什么jb玩意”。不管是什么原因，李逼再也不唱《梵高先生》了，或许在义乌小酒馆的那个夜晚，那个半醉半醒的梵高先生就已经死了吧。我想逼哥潦倒落魄的那些年，摸到吉他的时候也是很安心的吧，就像我现在摸到键盘一样。</p><h3>南京</h3><p>&amp;ensp;&amp;ensp;南京，至于南京，就留给未来吧。</p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 深圳 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World, Hello Blog</title>
      <link href="/posts/a343156.html"/>
      <url>/posts/a343156.html</url>
      
        <content type="html"><![CDATA[<center>_想来生活无非是痛苦和美丽..._</center><span id="more"></span><hr><p>&amp;nbsp;<br><em>“Yeah It’s on. ”</em></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Yang 的 Blog 就这么开通了。</p><p>2017 年，我的个人博客开通了</p><p>作为一个半吊子程序员，期望着打怪升级，梦想总是要有的，万一实现了呢，全栈工程师，万一我就做到了呢，Coding！Figthing！</p><p>在知乎上看到各种大牛搭建的自己的博客平台，有界面粗犷但是技术文写的跟葵花宝典一样的，也有各种简洁性冷淡的，看着心痒，于是乎自己花了一整天的时间折腾出了自己的Bolg平台，买域名，看教程，<br>一步一步的搞出了这个用GitHub Pages做虚拟主机搭建的静态web Blog，主题是Clone的，但以后积累的技术是自己的。加油！</p><p>&amp;nbsp;</p><hr><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>接下来说说搭建这个博客的技术细节。</p><p>在知乎上看到好多人推荐 <a href="https://pages.github.com/">GitHub Pages</a> + <a href="http://jekyllrb.com/">Jekyll</a> 快速 Building Blog 的技术方案，非常简单，不需要自己买服务器，甚至域名都没必要买。</p><p>优点：</p><ul><li><strong>Markdown</strong> 带来的优雅写作体验<br>第一次使用Markdown，开始很是不熟悉，磕磕碰碰，还需要去看Markdown的语法，但是已经领略到了Markdown的优雅</li><li>非常熟悉的 Git workflow ，<strong>Git Commit 即 Blog Post</strong></li><li>利用 GitHub Pages 的域名和免费无限空间，不用自己折腾主机</li><li>如果需要自定义域名，也只需要简单改改 DNS 加个 CNAME 就好了</li><li>Jekyll 的自定制非常容易，基本就是个模版引擎</li></ul><p>&amp;nbsp;</p><hr><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>这个模板是从这里Huxpro&#x2F;huxpro.github.io fork 的。THKS</p><p>感谢 Jekyll、Github Pages 、Bootstrap 和黄玄！</p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 深圳 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
